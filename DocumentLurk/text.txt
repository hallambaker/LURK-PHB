Internet Engineering Task Force (IETF)              Phillip Hallam-Baker
INTERNET-DRAFT                                         Comodo Group Inc.
Intended Status: info                                     March 18, 2016
Expires: September 19, 2016


          Limited Use of Remote Keys, Protocol and Reference.
                       draft-hallambaker-lurk-00

Abstract






Status of This Memo

   This Internet-Draft is submitted in full conformance with the 
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering 
   Task Force (IETF).  Note that other groups may also distribute 
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any 
   time.  It is inappropriate to use Internet-Drafts as reference 
   material or to cite them other than as "work in progress."

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the 
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal 
   Provisions Relating to IETF Documents 
   (http://trustee.ietf.org/license-info) in effect on the date of 
   publication of this document. Please review these documents 
   carefully, as they describe your rights and restrictions with respect
   to this document. Code Components extracted from this document must 
   include Simplified BSD License text as described in Section 4.e of 
   the Trust Legal Provisions and are provided without warranty as 
   described in the Simplified BSD License.











Hallam-Baker           Expires September 19, 2016               [Page 1]

Internet-Draft                LURK Sketch                     March 2016

Table of Contents

   1.  Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .  4
      2.1.  Requirements Language . . . . . . . . . . . . . . . . . .  4
      2.2.  Related Specifications  . . . . . . . . . . . . . . . . .  4
      2.3.  Terminology . . . . . . . . . . . . . . . . . . . . . . .  5
   3.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  5
      3.1.  Limited Life Credentials  . . . . . . . . . . . . . . . .  7
      3.2.  Private Key Service . . . . . . . . . . . . . . . . . . .  8
      3.3.  Partial Key Service . . . . . . . . . . . . . . . . . . .  9
   4.  Protocol Overview  . . . . . . . . . . . . . . . . . . . . . .  9
      4.1.  Establishing Trust Relationships  . . . . . . . . . . . . 10
         4.1.1.  Manual Administration  . . . . . . . . . . . . . . . 10
         4.1.2.  Using the Mathematical Mesh  . . . . . . . . . . . . 10
      4.2.  Creation of necessary key pairs   . . . . . . . . . . . . 11
      4.3.  Private key decryption  . . . . . . . . . . . . . . . . . 12
      4.4.  Private key agreement   . . . . . . . . . . . . . . . . . 12
      4.5.  Private key signature   . . . . . . . . . . . . . . . . . 12
      4.6.  Creation of Partial Key Agreement Key   . . . . . . . . . 12
      4.7.  Key Disposal  . . . . . . . . . . . . . . . . . . . . . . 13
      4.8.  Retrieve Audit Logs.  . . . . . . . . . . . . . . . . . . 13
   5.  Lurk Key Service Reference   . . . . . . . . . . . . . . . . . 13
      5.1.  Request Messages  . . . . . . . . . . . . . . . . . . . . 13
         5.1.1.  Message: LurkRequest   . . . . . . . . . . . . . . . 13
         5.1.2.  Message: LurkKeyRequest  . . . . . . . . . . . . . . 14
         5.1.3.  Message: LurkResponse  . . . . . . . . . . . . . . . 14
         5.1.4.  Successful Response Codes  . . . . . . . . . . . . . 14
         5.1.5.  Warning Response Codes   . . . . . . . . . . . . . . 14
         5.1.6.  Error Response Codes   . . . . . . . . . . . . . . . 15
         5.1.7.  Structure: Version   . . . . . . . . . . . . . . . . 15
         5.1.8.  Structure: Encoding  . . . . . . . . . . . . . . . . 15
         5.1.9.  Structure: KeyParameters   . . . . . . . . . . . . . 16
         5.1.10.  Structure: ParametersRSA  . . . . . . . . . . . . . 16
         5.1.11.  Structure: ParametersECDH   . . . . . . . . . . . . 16
      5.2.  Transaction: Hello  . . . . . . . . . . . . . . . . . . . 17
         5.2.1.  Message: HelloRequest  . . . . . . . . . . . . . . . 17
         5.2.2.  Message: HelloResponse   . . . . . . . . . . . . . . 17
      5.3.  Transaction: Create   . . . . . . . . . . . . . . . . . . 17
         5.3.1.  Message: CreateRequest   . . . . . . . . . . . . . . 18
         5.3.2.  Message: CreateResponse  . . . . . . . . . . . . . . 18
      5.4.  Transaction: Dispose  . . . . . . . . . . . . . . . . . . 18
         5.4.1.  Message: DisposeRequest  . . . . . . . . . . . . . . 18
         5.4.2.  Message: DisposeResponse   . . . . . . . . . . . . . 18
      5.5.  Transaction: Sign   . . . . . . . . . . . . . . . . . . . 18
         5.5.1.  Message: SignRequest   . . . . . . . . . . . . . . . 19
         5.5.2.  Message: SignResponse  . . . . . . . . . . . . . . . 19
      5.6.  Transaction: Agree  . . . . . . . . . . . . . . . . . . . 19
         5.6.1.  Message: AgreeRequest  . . . . . . . . . . . . . . . 20
         5.6.2.  Message: AgreeResponse   . . . . . . . . . . . . . . 20
      5.7.  Transaction: Decrypt  . . . . . . . . . . . . . . . . . . 20



Hallam-Baker           Expires September 19, 2016               [Page 2]

Internet-Draft                LURK Sketch                     March 2016

         5.7.1.  Message: DecryptRequest  . . . . . . . . . . . . . . 20
         5.7.2.  Message: DecryptResponse   . . . . . . . . . . . . . 21
   6.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 21
   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 21
      7.1.  Confidentiality . . . . . . . . . . . . . . . . . . . . . 21
         7.1.1.  Disclosure of Private Key  . . . . . . . . . . . . . 21
         7.1.2.  Side Channel Disclosure  . . . . . . . . . . . . . . 21
         7.1.3.  Targeted Side Channel Disclosure . . . . . . . . . . 22
         7.1.4.  Traffic Analysis . . . . . . . . . . . . . . . . . . 22
         7.1.5.  Metadata Leakage . . . . . . . . . . . . . . . . . . 22
      7.2.  Integrity . . . . . . . . . . . . . . . . . . . . . . . . 22
         7.2.1.  Unauthorized Use of Private Key  . . . . . . . . . . 22
      7.3.  Availability  . . . . . . . . . . . . . . . . . . . . . . 22
         7.3.1.  Cached data  . . . . . . . . . . . . . . . . . . . . 22
   8.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 23
   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 23
      9.1.  Normative References  . . . . . . . . . . . . . . . . . . 23
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 23




































Hallam-Baker           Expires September 19, 2016               [Page 3]

Internet-Draft                LURK Sketch                     March 2016

1. Abstract

   The Limited Use of Remote Keys (LURK) BOF has been scheduled with the
   objective of discussing approaches to mitigating security risks to 
   TLS private keys. In particular in situations where a Content 
   Delivery Network (CDN) is used to deliver content and thus the party 
   that is being authenticated is not the party that the user is 
   attempting to authenticate.

   Three classes of solution are considered, short term credentials, a 
   remote service offering to perform private key operations and a 
   remote service that is further constrained through the use of some 
   form of threshold approach. A JSON/HTTP protocol implementing the 
   second and third protocol is demonstrated and documented.

2. Definitions

2.1. Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", 
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this 
   document are to be interpreted as described in [RFC2119].

2.2. Related Specifications

   This protocol is makes use of technology described in the following 
   specifications

   JSON [RFC7159]

   For encoding of message data structures.

   JOSE [RFC7515] [RFC7516] [RFC7518]

   Formats for cryptographic messages and keys in JSON.

   JSON Web Service [draft-hallambaker-json-web-service-02]

   Describes the approach used for Web Service discovery and the 
   encapsulation of JSON messages as HTTP payloads with the necessary 
   authentication and encryption services.

   Uniform Data Fingerprint [draft-hallambaker-udf-03]

   Describes the mechanism used to create identifiers for cryptographic 
   keypairs from the public key.

   In addition, the following specifications are closely related but not
   required for implementation:





Hallam-Baker           Expires September 19, 2016               [Page 4]

Internet-Draft                LURK Sketch                     March 2016

   Transport Layer Security [RFC5246]

   The use of TLS to protect the confidentiality and integrity of all 
   protocol communications is of course highly recommended. It is 
   however highly undesirable for a cryptographic protocol such as LURK 
   should rely on transport layer security enhancements alone. 

   The Mathematical Mesh [draft-hallambaker-mesh-architecture-01] 
   [draft-hallambaker-mesh-reference-02]

   MAY be used to establish trust relationships between the parties in 
   the protocol.

   CFRG Elliptic Curves and Algorithms [RFC7748]

   The threshold and proxy re-encryption schemes described are likely to
   be of most interest in conjunction with the emerging elliptic curve 
   based cryptography.

   JSON-BCD [draft-hallambaker-jsonbcd-05]

   One piece of technology that is not currently implemented but would 
   be usefully factored out as a separate document is a mechanism to 
   support agreement of symmetric keys and related tickets for use in 
   the payload authentication mechanism.

2.3. Terminology

   The following words and phrases are used as defined terms in this 
   specification:

   Private Key

   Any secret information required to perform a Public Key operation. 
   This includes complete keys and partial keys.

   Partial Key 

   In cases where a threshold key scheme is in use, a private partial 
   key is the private key information used to participate in the 
   threshold scheme by one participant. 

   Complete Key

   A private key that is sufficient to perform the private key operation
   without any additional information being provided.








Hallam-Baker           Expires September 19, 2016               [Page 5]

Internet-Draft                LURK Sketch                     March 2016

3. Introduction

   The Limited Use of Remote Keys (LURK) BOF has been scheduled with the
   objective of discussing approaches to mitigating security risks to 
   TLS private keys. This objective was initially motivated by the need 
   to achieve site authentication in a scenario where the actual content
   is delivered by a third party (aka Content Delivery Networks). But as
   is demonstrated in the following, almost any solution to this problem
   will have much broader application.

   In evaluating proposals, it is important to consider the following 
   constraints:

   Security

   The security of a public key cryptosystem depends on the secrecy of 
   the private keys. A service that accepts unauthorized requests to 
   perform private key operations completely demolishes the security of 
   the cryptosystem.

   While the introduction of a remote key service provides a new 
   potential point of failure into a Web site deployment, a system that 
   has two points of vulnerability that are well protected is usually 
   more secure than one that has a single point of vulnerability that is
   unguarded. LURK may provide a solution to one of the principal causes
   of compromise of code signing infrastructures, the disclosure of 
   insecurely held private keys.

   Infrastructure Impact (Deployability)

   The Web is supported by a large and complex eco-system. A single Web 
   transaction secured by TLS typically depends on at least a dozen 
   parties and may depend on twice that number. It is not just the user 
   and the content provider that are participants. Both use software 
   applications provided by third parties for access which may in turn 
   be the product of collaboration between tens or hundreds of 
   collaborators. Site maintenance is typically outsourced to a 
   specialist in the field who will in turn typically outsource hosting 
   of the site itself. This hosting may in turn be augmented by a 
   content Delivery Network or DDoS mitigation service.

   A proposal that requires changes to be made by many parties in the 
   eco-system will be harder to deploy than a change which can be 
   applied bilaterally or unilaterally.

   Latency

   Delivery of Web Content is a competitive business where time is 
   literally money. Protocol proposals that delay the perceived loading 
   speed of Web sites are likely to be unacceptable.




Hallam-Baker           Expires September 19, 2016               [Page 6]

Internet-Draft                LURK Sketch                     March 2016

   Transparency and Audit

   Besides limiting access to the use of a private key, the LURK 
   protocol potentially provides a mechanism for auditing the use of the
   key. 

   Algorithm Agility

   Any scheme should be capable of supporting arbitrary public key 
   algorithms and operations. At minimum, support for RSA, Diffie 
   Hellman and the new CFRG Elliptic Curve algorithms is required.

   Besides Decryption and Digital Signature operations, it would be 
   highly advantageous for any protocol to support Proxy Re-Encryption 
   operations. In particular, support for 'vintage editions' of 
   recryption technology that avoids subsequent IPR encumbrances is 
   highly desirable.

   Leverage Bound Private Keys

   The term 'Trustworthy Computing' covers a wide range of hardware 
   based security measures that are now ubiquitously available on mobile
   devices and increasingly supported on desktop and server hardware. 
   For purposes of limiting exposure of keys, the 

3.1. Limited Life Credentials

   While the LURK acronym specifies 'Limited Use', it is important to 
   note that the core objective raised by the use scenario at issue is 
   to limit the window of vulnerability for keys which may be achieved 
   by other means than remote access.

   In particular, we can limit exposure to the risk of abuse of a 
   credentialed private key by limiting the validity of the credential, 
   either by severely limiting the validity period of the credential or 
   by employing effective mechanisms for revocation. Since the latter 
   has been attempted many times with little success, we concentrate on 
   the first approach.

   One of the chief concerns when using a CDN is that a machine that 
   might only host a site for a few days or even a few hours requires 
   access to a private key whose credential is typically valid for a 
   year or even more. Hosts that have serviced a site in the past may be
   rented to other customers for very different purposes before the 
   credentials have expired. The new customer might well have privileged
   access to the machine and be able to examine disks and memory to 
   recover confidential data including keys.

   Reducing the validity interval of the credential to match that of the
   host makes good sense. The chief obstacles to this approach being (1)
   the need to gracefully handle time synchronization errors in Web 



Hallam-Baker           Expires September 19, 2016               [Page 7]

Internet-Draft                LURK Sketch                     March 2016

   clients attempting to access the site. And (2) the administrative 
   burden of frequently installing certificate updates.

   Practical experience demonstrates that there is little difficulty 
   incurred by setting certificate the validity interval to 25 hours and
   that even validity intervals of a few hours incur little 
   inconvenience.

   Automatic issue of certificates is already the subject of the ACME 
   working group and is therefore not considered here except to the 
   extent that it might reduce the significance of the proposed use 
   scenario.

3.2. Private Key Service

   A private key service performs private key operations in response to 
   properly authenticated and authorized requests. At minimum, such a 
   service requires mechanisms to:

   Determine the private key whose use is requested.

   Authenticate and authorize the request.

   Protect the integrity of requests.

   Protect the integrity and confidentiality of responses.

   Such a service might prove insufficient for certain applications for 
   reasons of performance and/or security.

   Batching of requests may be desirable.

   The ability to pre-request operations may be desirable.

   The minimal approach is also unsatisfactory on security grounds. A 
   mechanism that relies on correct configuration of the system alone to
   prevent unauthorized use is likely to be fragile.

   One approach that could be used to mitigate such risk is to limit the
   application to specific cryptographic protocols rather than providing
   unrestricted key exchange or signature capabilities. For example, the
   service might perform a TLS 1.2 master secret derivation rather than 
   the RSA private key operation on which the exchange is based.

   While this approach has the benefit of limiting the consequences of a
   breach in theory, the practical effect is likely to be limited as 
   good cryptographic hygiene requires that a key used for one purpose 
   not be used for any other.






Hallam-Baker           Expires September 19, 2016               [Page 8]

Internet-Draft                LURK Sketch                     March 2016

   Another disadvantage of this approach is that it provides more 
   information to the Key Service and thus provides more opportunity for
   a malicious side channel attack. A malicious HSM that knows the 
   origin of the requests that it is dealing can choose to only defect 
   on requests that come from the correct counter-party. A well designed
   protocol that keeps the HSM ignorant of the source and context of the
   requests cannot restrict the instances in which it defects and is 
   thus at greater risk of exposure.

3.3. Partial Key Service

   The best way to mitigate the risk of unauthorized service is to make 
   use of some form of key splitting 'threshold' cryptography scheme 
   such that the use of private key information held at the client side 
   must be combined with use of private key information held at the LURK
   service to effect the desired result.

   This approach uses cryptography to enforce the authorization 
   criteria.

   While there are many threshold schemes that could be used in theory, 
   for purposes of LURK it is only necessary to split a key into some 
   number of parts (typically two) such that all the parts are required 
   to perform a private key operation. Thus 

4. Protocol Overview

   [Note that in the foregoing examples, a technical limitation in the 
   implementation prevents inclusion of the authentication wrapper used 
   to authenticate protocol requests and responses. Removal of this 
   limitation prior to IETF 95 is anticipated.]

   The LURK protocol has three parties:

   LURK Service [Key Holder]

   The holder of the key material. Responds to requests to create, use 
   and destroy key pair. Optionally keeps audit logs of all operations.

   LURK Client [Key User]

   The party authorized to direct requests to use the key material.

   Administrator [Authenticated Party]

   The party that authorizes LURK Clients to use key material and is 
   authorized to issue creation, and destruction requests for the keys 
   they have created.






Hallam-Baker           Expires September 19, 2016               [Page 9]

Internet-Draft                LURK Sketch                     March 2016

   Establishing the Service and Administrator as separate parties is 
   important as it allows the LURK service to be specified in a form 
   that can be readily implemented on a HSM.

4.1. Establishing Trust Relationships

   The LURK protocol requires two trust relationships to be managed:

   Between the Administrator and the LURK Service

   Between the Client and the LURK Service

   The means of configuration of these relationships is outside the 
   scope of this protocol but it is assumed that each of these parties 
   can authenticate messages from the other using digital signatures and
   public key exchange.

4.1.1. Manual Administration

   The necessary trust relationships MAY be established manually. This 
   presents something of a challenge in the Content Delivery Network 
   scenario as LURK Clients are being constantly added and removed.

4.1.2. Using the Mathematical Mesh

   One mechanism that MAY be used to establish the necessary 
   authentication information is the Mathematical Mesh [draft-
   hallambaker-mesh-architecture-01]. This provides a means of 
   automating the necessary administration processes without needing to 
   add support for these processes in the core LURK specification.

   To begin configuration of a LURK deployment using the Mesh, the 
   administrator:

   Creates a Mesh profile (if they haven't already done so). 

   Connects the LURK Service to their profile as an application with 
   configuration privilege.

   Connects the LURK Client to their profile as an application with use 
   privilege.

   [The Mesh application profile for the service will be added to this 
   document as an appendix in due course.]

   Once these steps are complete, all three parties have knowledge of 
   the root of trust from which to accept control instructions (i.e. the
   Administrator's Mesh Profile fingerprint) and a means of 
   authenticating messages from any of the three parties.





Hallam-Baker           Expires September 19, 2016              [Page 10]

Internet-Draft                LURK Sketch                     March 2016

   The administrator MAY configure additional LURK Clients and/or 
   Services in the same fashion.

4.2. Creation of necessary key pairs 

   Key pair creation is a function reserved for the administrator. To 
   create a key pair, the administrator sends an authenticated request 
   to the service. 

   Note that while message layer encryption MAY be used, it is not 
   actually required in this case. 

   [Yes, I know there are no authentication wrappers on the following  
   messages. Just pretend they are there, OK? I have had all of two days
   to work on this.] 

   POST /.well-known/lurk/HTTP/1.1
   Host: example.com
   Content-Length: 122
   
   {
     "CreateRequest": {
       "Parameters": {
         "ParametersRSA": {
           "Signature": true,
           "KeySize": 2048}}}}

   The response is likewise authenticated. 

   HTTP/1.1 200 OK
   Date: Fri 18 Mar 2016 04:59:57
   Content-Length: 25
   
   {
     "CreateResponse": {}}

   The process id repeated to create an encryption keypair. For 
   conciseness, only the message payloads are shown: 
















Hallam-Baker           Expires September 19, 2016              [Page 11]

Internet-Draft                LURK Sketch                     March 2016

   Request: 

   {
     "CreateRequest": {
       "Parameters": {
         "ParametersRSA": {
           "Encrypt": true,
           "KeySize": 2048}}}}

   Response: 

   {
     "CreateResponse": {}}

4.3. Private key decryption 

   Request: 

   {
     "DecryptRequest": {
       "BulkAlg": "aescbc256"}}

   Response: 

   {
     "DecryptResponse": {}}

4.4. Private key agreement 

   [This is not currently implemented due to lack of the necessary  
   library to implement the new CFRG algorithms.] 

4.5. Private key signature 

   Request: 

   {
     "SignRequest": {
       "DigestAlg": "sha256",
       "Data": "
   dGhpcyBpcyBhIHRlc3Q"}}

   Response: 

   {
     "SignResponse": {}}








Hallam-Baker           Expires September 19, 2016              [Page 12]

Internet-Draft                LURK Sketch                     March 2016

4.6. Creation of Partial Key Agreement Key 

   [This is not currently implemented due to lack of the necessary  
   library to implement the new CFRG algorithms.] 

4.7. Key Disposal 

   Request: 

   {
     "DisposeRequest": {}}

   Response: 

   {
     "DisposeResponse": {}}

4.8. Retrieve Audit Logs. 

   [Not yet implemented.] 

5. Lurk Key Service Reference 

   SRV Prefix: 

         _lurk._tcp 

   HTTP Well Known Service Prefix: 

         /.well-known/lurk 

   The LURK key service provides access to a remote key service. The 
   remote service performs private key related operations in response to
   authenticated requests. 

5.1. Request Messages 

   A LURK request payload consists of a payload object that inherits 
   from the LurkRequest class. 

   Note that the request payload is the subject of the presentation 
   layer authentication wrapper. Thus the authantication wrapper is not 
   part of the request payload. 

5.1.1. Message: LurkRequest 

   Base class for all request messages. 

   [None] 





Hallam-Baker           Expires September 19, 2016              [Page 13]

Internet-Draft                LURK Sketch                     March 2016

5.1.2. Message: LurkKeyRequest 

   Base class for all key request messages. 

         *   Inherits: LurkRequest 

   [None] 

5.1.3. Message: LurkResponse 

   Base class for all responses. Contains only the status code and 
   status description fields. 

   A service MAY return either the response message specified for that 
   transaction or any parent of that message.  Thus the LurkResponse 
   message MAY be returned in response  to any request. 

   Status: Integer (Optional) 

         Status return code. The SMTP/HTTP scheme of 2xx = Success, 3xx 
            = incomplete, 4xx = failure is followed. 

   StatusDescription: String (Optional) 

         Text description of the status return code for debugging  and 
            log file use. 

5.1.4. Successful Response Codes 

   The following response codes are returned when a transaction has 
   completed successfully. 

   [201] SuccessOK 

         Operation completed successfully 

5.1.5. Warning Response Codes 

   The following response codes are returned when a transaction did not 
   complete because the target service has been redirected. 

   In the case that a redirect code is returned, the  StatusDescription 
   field contains the URI of the  new service. Note however that the 
   redirect location  indicated in a status response might be incorrect 
   or even malicious and cannot be considered  trustworthy without 
   appropriate authentication. 








Hallam-Baker           Expires September 19, 2016              [Page 14]

Internet-Draft                LURK Sketch                     March 2016

   [303] RedirectPermanent 

         Service has been permanently moved 

   [307] RedirectTemporary 

         Service has been temporarily moved 

5.1.6. Error Response Codes 

   A response code in the range 400-499 is returned when the service was
   able to process the transaction but the transaction resulted in an 
   error. 

   [401] ClientUnauthorized 

         Client is not authorized to perform specified request 

   [404] NotFound 

         The requested object could not be found. 

5.1.7. Structure: Version 

   Describes a protocol version. 

   Major: Integer (Optional) 

         Major version number of the service protocol. A higher 

   Minor: Integer (Optional) 

         Minor version number of the service protocol. 

   Encodings: Encoding [0..Many] 

         Enumerates alternative encodings (e.g. ASN.1, XML, JSON-B) 
            supported by the service. If no encodings are specified, the
            JSON encoding is assumed. 

   URI: String [0..Many] 

         The preferred URI for this service. This MAY be used to effect 
            a redirect in the case that a service moves. 










Hallam-Baker           Expires September 19, 2016              [Page 15]

Internet-Draft                LURK Sketch                     March 2016

5.1.8. Structure: Encoding 

   Describes a message content encoding. 

   ID: String [0..Many] 

         The IANA encoding name 

   Dictionary: String [0..Many] 

         For encodings that employ a named dictionary for tag or data 
            compression, the name of the dictionary as defined by that  
            encoding scheme. 

5.1.9. Structure: KeyParameters 

   Specifies a cryptographic algorithm and related parameters. Note that
   while the parameters structures allows a key to be specified that 
   supports multiple operations each key SHOULD only specify  exactly 
   one operation. 

   Encrypt: Boolean (Optional) 

   Agreement: Boolean (Optional) 

   Signature: Boolean (Optional) 

5.1.10. Structure: ParametersRSA 

         *   Inherits: KeyParameters 

   Describes parameters for the RSA algorithm 

   KeySize: Integer (Optional) 

         The Key Size. Services MUST support key sizes of 2048 and 4096 
            bits. Services MAY support other key sizes greater than 2048
            bits. Services MUST NOT support key sizes less than 2048 
            bits. 

   Padding: String [0..Many] 

         If present, specifies the padding modes that are to be 
            supported by the key. 

5.1.11. Structure: ParametersECDH 

         *   Inherits: KeyParameters 






Hallam-Baker           Expires September 19, 2016              [Page 16]

Internet-Draft                LURK Sketch                     March 2016

   Specifies parameters for Elliptic Curve Diffie Hellman algorithm 

   Curve: String (Optional) 

   Algorithm: String (Optional) 

         Specify the precise algorithm and version. 

5.2. Transaction: Hello 

   Request: HelloRequest 

   Response:HelloResponse 

   Report service and version information. 

   The Hello transaction provides a means of determining which protocol 
   versions, message encodings and transport protocols are supported by 
   the service. 

5.2.1. Message: HelloRequest 

         *   Inherits: LurkRequest 

   [None] 

5.2.2. Message: HelloResponse 

   Always reports success. Describes the configuration of the Mesh 
   portal service. 

         *   Inherits: LurkResponse 

   Version: Version (Optional) 

         Enumerates the protocol versions supported 

   Alternates: Version [0..Many] 

         Enumerates alternate protocol version(s) supported 

5.3. Transaction: Create 

   Request: CreateRequest 

   Response:CreateResponse 

   Create a new public key pair for the specified algorithm and  
   cryptographic parameters. 





Hallam-Baker           Expires September 19, 2016              [Page 17]

Internet-Draft                LURK Sketch                     March 2016

5.3.1. Message: CreateRequest 

         *   Inherits: LurkKeyRequest 

   Request creation of a new key pair 

   [None] 

5.3.2. Message: CreateResponse 

         *   Inherits: LurkResponse 

   Returns the identifier of a key pair 

   KeyId: String (Optional) 

         Unique identifier for the public key pair created if the 
            operation succeeded. 

5.4. Transaction: Dispose 

   Request: DisposeRequest 

   Response:DisposeResponse 

   Dispose of the specified key pair. 

5.4.1. Message: DisposeRequest 

         *   Inherits: LurkKeyRequest 

   Request creation of a new key pair 

   KeyId: String (Optional) 

         The Key to dispose. 

5.4.2. Message: DisposeResponse 

         *   Inherits: LurkResponse 

   Reports result of an attempt to dispose of a key pair. 

   [None] 










Hallam-Baker           Expires September 19, 2016              [Page 18]

Internet-Draft                LURK Sketch                     March 2016

5.5. Transaction: Sign 

   Request: SignRequest 

   Response:SignResponse 

   Request signature of a data value or digest 

5.5.1. Message: SignRequest 

         *   Inherits: LurkKeyRequest 

   Describe the data to be signed 

   KeyId: String (Optional) 

         The key to be used for the operation. 

   DigestAlg: String (Optional) 

         The digest algorithm to be used. 

   Data: Binary (Optional) 

         Data to be digested and signed. 

   Digest: Binary (Optional) 

         Digest calculated on the data to be signed. 

         This field is ignored if the Data field is present. 

5.5.2. Message: SignResponse 

         *   Inherits: LurkResponse 

   Returns the signature response. 

   Value: Binary (Optional) 

         The signature response value. 













Hallam-Baker           Expires September 19, 2016              [Page 19]

Internet-Draft                LURK Sketch                     March 2016

5.6. Transaction: Agree 

   Request: AgreeRequest 

   Response:AgreeResponse 

   Perform a key agreement operation. 

5.6.1. Message: AgreeRequest 

         *   Inherits: LurkKeyRequest 

   Specify the key agreement parameters. 

   KeyId: String (Optional) 

         The key to be used for the operation. 

5.6.2. Message: AgreeResponse 

         *   Inherits: LurkResponse 

   Returns the result of the key agreement 

   Value: Binary (Optional) 

         The key agreement result 

5.7. Transaction: Decrypt 

   Request: DecryptRequest 

   Response:DecryptResponse 

   Perform a decryption operation. 

5.7.1. Message: DecryptRequest 

         *   Inherits: LurkKeyRequest 















Hallam-Baker           Expires September 19, 2016              [Page 20]

Internet-Draft                LURK Sketch                     March 2016

   Request a decryption operation. 

   KeyId: String (Optional) 

         The key to be used for the operation. 

   BulkAlg: String (Optional) 

         The bulk decryption algorithm to be used 

   Data: Binary (Optional) 

         Data to be decrypted 

   WrappedKey: Binary (Optional) 

         Wrapped key data to decrypt 

5.7.2. Message: DecryptResponse 

         *   Inherits: LurkResponse 

   Returns the result of the decryption request 

   Value: Binary (Optional) 

         The decrypted data 

6. Acknowledgements

   TBS

7. Security Considerations

   [This is just a sketch for the present.]

7.1. Confidentiality

7.1.1. Disclosure of Private Key

   The service provider has access to the private key or a partial key 
   which may therefore be at risk of disclosure if the service is 
   breached.

   Best practice dictates that a LURK service employ mechanisms to bind 
   private keys and partial keys to the Host such that extraction is not
   possible.







Hallam-Baker           Expires September 19, 2016              [Page 21]

Internet-Draft                LURK Sketch                     March 2016

7.1.2. Side Channel Disclosure

   A malicious LURK service might intentionally leak a private key or 
   partial key through a side channel. For example the RSA modulus side 
   channel described by Moti Yung.

   Another potential vector for side channel attacks is through any 
   mechanism that involves randomness. For example, a service might leak
   parts of the private key in nonce values it supplied.

7.1.3. Targeted Side Channel Disclosure

   A malicious LURK service that has context information that allows it 
   to determine the source of a request might only defect on specific 
   requests. For example, leaking private key material on a request from
   a co-conspirator or leaking session key material when communication 
   is being made to a specific site to facilitate surveillance.

7.1.4. Traffic Analysis

   The patterns of access to a LURK service might reveal information 
   that discloses behaviors of the client using the service.

7.1.5. Metadata Leakage

   A LURK service might log metadata relating to requests that would not
   otherwise be kept and thus expose the data to the possibility of 
   disclosure.

   Contrawise, metadata capture might be highly desirable to support 
   logging and audit.

7.2. Integrity

7.2.1. Unauthorized Use of Private Key

   A LURK service might provide private key services to unauthorized 
   parties.

   The ability to log and audit use of the service is thus highly 
   desirable.

7.3. Availability

7.3.1. Cached data

   The long term master secrets established in a TLS key exchange may 
   have a lifetime of hours or even days. A host that no longer has 
   access to the LURK service may nevertheless have the ability to 
   establish TLS channels by using cached connection tickets.




Hallam-Baker           Expires September 19, 2016              [Page 22]

Internet-Draft                LURK Sketch                     March 2016

8. IANA Considerations

   [TBS list out all the code points that require an IANA registration]

9. References

9.1. Normative References

   [RFC7159]  Bray, T., "The JavaScript Object Notation (JSON) Data 
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014.

   [RFC7515]  Jones, M.,Bradley, J.,Sakimura, N., "JSON Web Signature 
              (JWS)", RFC 7515, DOI 10.17487/RFC7515, May 2015.

   [RFC7516]  Jones, M.,Hildebrand, J., "JSON Web Encryption (JWE)", RFC
              7516, DOI 10.17487/RFC7516, May 2015.

   [RFC7518]  Jones, M., "JSON Web Algorithms (JWA)", RFC 7518, DOI 
              10.17487/RFC7518, May 2015.

   [RFC5246]  Dierks, T.,Rescorla, E., "The Transport Layer Security 
              (TLS) Protocol Version 1.2", RFC 5246, DOI 
              10.17487/RFC5246, August 2008.

   [RFC7748]  Langley, A.,Hamburg, M.,Turner, S., "Elliptic Curves for 
              Security", RFC 7748, DOI 10.17487/RFC7748, January 2016.

   [draft-hallambaker-json-web-service-02]  , "[Reference Not Found!]".

   [draft-hallambaker-udf-03]  , "[Reference Not Found!]".

   [draft-hallambaker-mesh-architecture-01]  , "[Reference Not Found!]".

   [draft-hallambaker-mesh-reference-02]  , "[Reference Not Found!]".

   [draft-hallambaker-jsonbcd-05]  , "[Reference Not Found!]".

Author's Address

   Phillip Hallam-Baker
   Comodo Group Inc.

   philliph@comodo.com










Hallam-Baker           Expires September 19, 2016              [Page 23]
