<?xml version="1.0"?>
<doc>
    <assembly>
        <name>libCrypto</name>
    </assembly>
    <members>
        <member name="T:Goedel.LibCrypto.PKIX.RSAPublicKey">
            <summary>
            Formatting class for representing RSA Public Keys in ASN.1 and
            calculating the PKIX keyinfo version of the UDF fingerprint.
            </summary>
            <summary>
            RSAPublicKey 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.RSAPublicKey.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Create instance from RSAParameters structure.
            </summary>
            <param name="RSAParameters">Input parameters.</param>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPublicKey.PublicExponent">
            <summary>
            ASN.1 member PublicExponent 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPublicKey.Modulus">
            <summary>
            ASN.1 member Modulus 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.RSAPublicKey.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.Certificate">
            <summary>
            Backing class for managing X.509v3 Certificates using the 
            native C# parser code.
            </summary>
            <summary>
            Certificate 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.Data">
            <summary>
            Returns the cached binary value of the certificate. Note that this 
            property is only filled when the certificate is signed.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.Application">
            <summary>
            High level description of key use.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.UDF">
            <summary>
            The UDF fingerprint of the keyInfo element.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.SHA1">
            <summary>
            The SHA1 fingerprint of the certificate.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.SHA256">
            <summary>
            The SHA-2-256 fingerprint of the certificate.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.KeyPair">
            <summary>
            The Certificate Public Key
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.CryptoProviderSignature">
            <summary>
            Returns the signature provider associated with the current certificate.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.CryptoProviderExchange">
            <summary>
            Returns the exchange provider associated with the current certificate.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Certificate.SubjectKeyIdentifier">
            <summary>
            Subject Key Identifier
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.#ctor(Goedel.LibCrypto.KeyPair,Goedel.LibCrypto.PKIX.Application,Goedel.LibCrypto.PKIX.Certificate)">
            <summary>
            Create an anonymous certificate with the specified key uses, subject Key and
            sign with the specified key.
            <para>
            Default lifespan is 20 years.
            </para>
            </summary>
            <param name="SubjectKey">Cryptographic provider for the subject key.</param>
            <param name="Application">Certificate application(s).</param>
            <param name="SigningCertificate">Certificate of signer.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.#ctor(Goedel.LibCrypto.KeyPair,Goedel.LibCrypto.PKIX.Application)">
            <summary>
            Create a certificate with the specified subject Key. Note that the template is 
            must be completed with calls to set validity etc. before use.
            </summary>
            <param name="SubjectKey">Cryptographic provider for the subject key.</param>
            <param name="Application">Certificate application(s).</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.#ctor(Goedel.LibCrypto.KeyPair,Goedel.LibCrypto.PKIX.Application,System.String,System.String)">
            <summary>
            Create a certificate with the specified subject Key. Note that the template is 
            must be completed with calls to set validity etc. before use.
            </summary>
            <param name="SubjectKey">Cryptographic provider for the subject key.</param>
            <param name="Application">Certificate application(s).</param>
            <param name="Subject">Subject name.</param>
            <param name="SubjectAltName">The certificate subject altname</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.#ctor(Goedel.LibCrypto.CryptoProvider,Goedel.LibCrypto.PKIX.Application)">
            <summary>
            Create a certificate with the specified subject Key. Note that the template is 
            must be completed with calls to set validity etc. before use.
            </summary>
            <param name="SubjectKey">Cryptographic provider for the subject key.</param>
            <param name="Application">Certificate application(s).</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.#ctor(System.Byte[])">
            <summary>
            Create a certificate from binary data. 
            </summary>
            <param name="Data">Binary certificate data</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.Sign(Goedel.LibCrypto.PKIX.Certificate)">
            <summary>
            Sign certificate. The issuer name and key identifier are taken from the
            signing certificate.
            </summary>
            <param name="SigningCertificate">Certificate of signer.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.Sign">
            <summary>
            Self-sign certificate. The issuer name and key identifier 
            are taken from the TBS certificate.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.Sign(Goedel.LibCrypto.CryptoProviderSignature)">
            <summary>
            Sign certificate.
            </summary>
            <param name="Signer">Cryptographic provider for the signer.</param>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Certificate.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Certificate.SignatureAlgorithm">
            <summary>
            ASN.1 member SignatureAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Certificate.TBSCertificate">
            <summary>
            ASN.1 member TBSCertificate 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Certificate.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.AlgorithmIdentifier">
            <summary>
            AlgorithmIdentifier 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid)">
            <summary>
            Convert a X509Certificate2 Oid structure to an algorithm identifier.
            </summary>
            <param name="Oid"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AlgorithmIdentifier.#ctor(System.String)">
            <summary>
            Construct from OID identifier string.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AlgorithmIdentifier.#ctor(System.String,System.Int32[])">
            <summary>
            Create an Algorithm Identifier from an integer array.
            </summary>
            <param name="Text"></param>
            <param name="Numbers"></param>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AlgorithmIdentifier.Parameters">
            <summary>
            ASN.1 member Parameters 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AlgorithmIdentifier.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AlgorithmIdentifier.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.CertificationRequest">
            <summary>
            CertificationRequest 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertificationRequest.#ctor">
            <summary>
            Construct a certification request.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertificationRequest.#ctor(Goedel.LibCrypto.PKIX.Certificate)">
            <summary>
            Construct a certification request for the specified certificate.
            </summary>
            <param name="Certificate"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertificationRequest.Sign(Goedel.LibCrypto.CryptoProviderSignature)">
            <summary>
            Sign the request
            </summary>
            <param name="SigningKey"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertificationRequest.SetSubject(System.String)">
            <summary>
            Set the subject name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificationRequest.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificationRequest.SignatureAlgorithm">
            <summary>
            ASN.1 member SignatureAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificationRequest.CertificationRequestInfo">
            <summary>
            ASN.1 member CertificationRequestInfo 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertificationRequest.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.CertificationRequestInfo">
            <summary>
            CertificationRequestInfo 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertificationRequestInfo.#ctor">
            <summary>
            Create an empty CertificationRequestInfo class with version 1.0
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificationRequestInfo.Attributes">
            <summary>
            ASN.1 member Attributes 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificationRequestInfo.SubjectPublicKeyInfo">
            <summary>
            ASN.1 member SubjectPublicKeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificationRequestInfo.Subject">
            <summary>
            ASN.1 member Subject 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificationRequestInfo.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertificationRequestInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.SubjectPublicKeyInfo">
            <summary>
            SubjectPublicKeyInfo 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.SubjectPublicKeyInfo.#ctor(System.String,System.Byte[])">
            <summary>
            Construct from algorithm identifier and key data.
            </summary>
            <param name="OID">Algorithm identifier.</param>
            <param name="KeyData">Key Data.</param>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.SubjectPublicKeyInfo.SubjectPublicKey">
            <summary>
            ASN.1 member SubjectPublicKey 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.SubjectPublicKeyInfo.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.SubjectPublicKeyInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.Constants">
            <summary>
            id_pkix =  iso(1)  identified_organization(3)  dod(6)  internet(1)  security(5)  mechanisms(5)  pkix(7) 
            </summary>
            <summary>
            id_at =  joint_iso_ccitt(2)  ds(5)  at(4) 
            </summary>
            <summary>
            pkcs =  iso(1)  member_body(2)  us(840)  rsadsi(113549)  pkcs(1) 
            </summary>
            <summary>
            id_ce =  joint_iso_ccitt(2)  ds(5)  ce(29) 
            </summary>
            <summary>
            holdInstruction =  joint_iso_itu_t(2)  member_body(2)  us(840)  x9cm(10040)  holdInstruction(2) 
            </summary>
            <summary>
            nistalgorithm =  joint_iso_itu_t(2)  country(16)  us(840)  organization(1)  gov(101)  csor(3)  nistalgorithm(4) 
            </summary>
            <summary>
            dod_arc =  iso(1)  identified_organization(3)  dod(6)  internet(1)  private(4)  enterprise(1)  number(6449)  certificates(1)  categories(3)  certified_delivery(5) 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_pkix">
            <summary>
            id_pkix as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_pkix">
            <summary>
            id_pkix as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_pe">
            <summary>
            id_pe = id_pkix (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_pe">
            <summary>
            id_pe = id_pkix (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_pe_authorityInfoAccess">
            <summary>
            id_pe_authorityInfoAccess = id_pe (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_pe_authorityInfoAccess">
            <summary>
            id_pe_authorityInfoAccess = id_pe (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_pe_subjectInfoAccess">
            <summary>
            id_pe_subjectInfoAccess = id_pe (11) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_pe_subjectInfoAccess">
            <summary>
            id_pe_subjectInfoAccess = id_pe (11) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_qt">
            <summary>
            id_qt = id_pkix (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_qt">
            <summary>
            id_qt = id_pkix (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_qt_cps">
            <summary>
            id_qt_cps = id_qt (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_qt_cps">
            <summary>
            id_qt_cps = id_qt (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_qt_unotice">
            <summary>
            id_qt_unotice = id_qt (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_qt_unotice">
            <summary>
            id_qt_unotice = id_qt (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_kp">
            <summary>
            id_kp = id_pkix (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_kp">
            <summary>
            id_kp = id_pkix (3) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_kp_serverAuth">
            <summary>
            id_kp_serverAuth = id_kp (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_kp_serverAuth">
            <summary>
            id_kp_serverAuth = id_kp (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_kp_clientAuth">
            <summary>
            id_kp_clientAuth = id_kp (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_kp_clientAuth">
            <summary>
            id_kp_clientAuth = id_kp (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_kp_codeSigning">
            <summary>
            id_kp_codeSigning = id_kp (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_kp_codeSigning">
            <summary>
            id_kp_codeSigning = id_kp (3) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_kp_emailProtection">
            <summary>
            id_kp_emailProtection = id_kp (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_kp_emailProtection">
            <summary>
            id_kp_emailProtection = id_kp (4) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_kp_timeStamping">
            <summary>
            id_kp_timeStamping = id_kp (8) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_kp_timeStamping">
            <summary>
            id_kp_timeStamping = id_kp (8) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_kp_OCSPSigning">
            <summary>
            id_kp_OCSPSigning = id_kp (9) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_kp_OCSPSigning">
            <summary>
            id_kp_OCSPSigning = id_kp (9) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ad">
            <summary>
            id_ad = id_pkix (48) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ad">
            <summary>
            id_ad = id_pkix (48) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ad_ocsp">
            <summary>
            id_ad_ocsp = id_ad (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ad_ocsp">
            <summary>
            id_ad_ocsp = id_ad (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ad_caIssuers">
            <summary>
            id_ad_caIssuers = id_ad (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ad_caIssuers">
            <summary>
            id_ad_caIssuers = id_ad (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ad_timeStamping">
            <summary>
            id_ad_timeStamping = id_ad (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ad_timeStamping">
            <summary>
            id_ad_timeStamping = id_ad (3) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ad_caRepository">
            <summary>
            id_ad_caRepository = id_ad (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ad_caRepository">
            <summary>
            id_ad_caRepository = id_ad (5) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at">
            <summary>
            id_at as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at">
            <summary>
            id_at as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_countryName">
            <summary>
            id_at_countryName = id_at (6) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_countryName">
            <summary>
            id_at_countryName = id_at (6) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_organizationName">
            <summary>
            id_at_organizationName = id_at (10) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_organizationName">
            <summary>
            id_at_organizationName = id_at (10) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_organizationalUnitName">
            <summary>
            id_at_organizationalUnitName = id_at (11) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_organizationalUnitName">
            <summary>
            id_at_organizationalUnitName = id_at (11) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_dnQualifier">
            <summary>
            id_at_dnQualifier = id_at (46) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_dnQualifier">
            <summary>
            id_at_dnQualifier = id_at (46) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_stateOrProvinceName">
            <summary>
            id_at_stateOrProvinceName = id_at (8) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_stateOrProvinceName">
            <summary>
            id_at_stateOrProvinceName = id_at (8) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_commonName">
            <summary>
            id_at_commonName = id_at (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_commonName">
            <summary>
            id_at_commonName = id_at (3) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_serialNumber">
            <summary>
            id_at_serialNumber = id_at (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_serialNumber">
            <summary>
            id_at_serialNumber = id_at (5) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_localityName">
            <summary>
            id_at_localityName = id_at (7) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_localityName">
            <summary>
            id_at_localityName = id_at (7) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_title">
            <summary>
            id_at_title = id_at (12) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_title">
            <summary>
            id_at_title = id_at (12) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_name">
            <summary>
            id_at_name = id_at (41) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_name">
            <summary>
            id_at_name = id_at (41) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_surname">
            <summary>
            id_at_surname = id_at (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_surname">
            <summary>
            id_at_surname = id_at (4) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_givenName">
            <summary>
            id_at_givenName = id_at (42) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_givenName">
            <summary>
            id_at_givenName = id_at (42) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_initials">
            <summary>
            id_at_initials = id_at (43) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_initials">
            <summary>
            id_at_initials = id_at (43) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_pseudonym">
            <summary>
            id_at_pseudonym = id_at (65) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_pseudonym">
            <summary>
            id_at_pseudonym = id_at (65) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_at_generationQualifier">
            <summary>
            id_at_generationQualifier = id_at (44) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_at_generationQualifier">
            <summary>
            id_at_generationQualifier = id_at (44) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs">
            <summary>
            pkcs as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs">
            <summary>
            pkcs as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_9">
            <summary>
            pkcs_9 = pkcs (9) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_9">
            <summary>
            pkcs_9 = pkcs (9) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_emailAddress">
            <summary>
            id_emailAddress = pkcs_9 (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_emailAddress">
            <summary>
            id_emailAddress = pkcs_9 (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_1">
            <summary>
            pkcs_1 = pkcs (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_1">
            <summary>
            pkcs_1 = pkcs (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__rsaEncryption">
            <summary>
            rsaEncryption = pkcs_1 (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__rsaEncryption">
            <summary>
            rsaEncryption = pkcs_1 (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__sha1WithRSAEncryption">
            <summary>
            sha1WithRSAEncryption = pkcs_1 (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__sha1WithRSAEncryption">
            <summary>
            sha1WithRSAEncryption = pkcs_1 (5) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__sha224WithRSAEncryption">
            <summary>
            sha224WithRSAEncryption = pkcs_1 (14) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__sha224WithRSAEncryption">
            <summary>
            sha224WithRSAEncryption = pkcs_1 (14) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__sha256WithRSAEncryption">
            <summary>
            sha256WithRSAEncryption = pkcs_1 (11) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__sha256WithRSAEncryption">
            <summary>
            sha256WithRSAEncryption = pkcs_1 (11) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__sha384WithRSAEncryption">
            <summary>
            sha384WithRSAEncryption = pkcs_1 (12) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__sha384WithRSAEncryption">
            <summary>
            sha384WithRSAEncryption = pkcs_1 (12) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__sha512WithRSAEncryption">
            <summary>
            sha512WithRSAEncryption = pkcs_1 (13) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__sha512WithRSAEncryption">
            <summary>
            sha512WithRSAEncryption = pkcs_1 (13) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12">
            <summary>
            pkcs_12 = pkcs (12) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12">
            <summary>
            pkcs_12 = pkcs (12) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12_10">
            <summary>
            pkcs_12_10 = pkcs_12 (10) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12_10">
            <summary>
            pkcs_12_10 = pkcs_12 (10) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12_bagtype">
            <summary>
            pkcs_12_bagtype = pkcs_12_10 (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12_bagtype">
            <summary>
            pkcs_12_bagtype = pkcs_12_10 (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12_keybag">
            <summary>
            pkcs_12_keybag = pkcs_12_bagtype (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12_keybag">
            <summary>
            pkcs_12_keybag = pkcs_12_bagtype (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12_shroudedbag">
            <summary>
            pkcs_12_shroudedbag = pkcs_12_bagtype (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12_shroudedbag">
            <summary>
            pkcs_12_shroudedbag = pkcs_12_bagtype (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12_certbag">
            <summary>
            pkcs_12_certbag = pkcs_12_bagtype (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12_certbag">
            <summary>
            pkcs_12_certbag = pkcs_12_bagtype (3) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12_crlbag">
            <summary>
            pkcs_12_crlbag = pkcs_12_bagtype (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12_crlbag">
            <summary>
            pkcs_12_crlbag = pkcs_12_bagtype (4) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12_secretbag">
            <summary>
            pkcs_12_secretbag = pkcs_12_bagtype (5) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12_secretbag">
            <summary>
            pkcs_12_secretbag = pkcs_12_bagtype (5) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__pkcs_12_safecontentsbag">
            <summary>
            pkcs_12_safecontentsbag = pkcs_12_bagtype (6) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__pkcs_12_safecontentsbag">
            <summary>
            pkcs_12_safecontentsbag = pkcs_12_bagtype (6) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce">
            <summary>
            id_ce as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce">
            <summary>
            id_ce as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_authorityKeyIdentifier">
            <summary>
            id_ce_authorityKeyIdentifier = id_ce (35) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_authorityKeyIdentifier">
            <summary>
            id_ce_authorityKeyIdentifier = id_ce (35) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_subjectKeyIdentifier">
            <summary>
            id_ce_subjectKeyIdentifier = id_ce (14) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_subjectKeyIdentifier">
            <summary>
            id_ce_subjectKeyIdentifier = id_ce (14) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_keyUsage">
            <summary>
            id_ce_keyUsage = id_ce (15) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_keyUsage">
            <summary>
            id_ce_keyUsage = id_ce (15) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_privateKeyUsagePeriod">
            <summary>
            id_ce_privateKeyUsagePeriod = id_ce (16) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_privateKeyUsagePeriod">
            <summary>
            id_ce_privateKeyUsagePeriod = id_ce (16) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_certificatePolicies">
            <summary>
            id_ce_certificatePolicies = id_ce (32) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_certificatePolicies">
            <summary>
            id_ce_certificatePolicies = id_ce (32) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__anyPolicy">
            <summary>
            anyPolicy = id_ce_certificatePolicies (0) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__anyPolicy">
            <summary>
            anyPolicy = id_ce_certificatePolicies (0) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_policyMappings">
            <summary>
            id_ce_policyMappings = id_ce (33) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_policyMappings">
            <summary>
            id_ce_policyMappings = id_ce (33) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_subjectAltName">
            <summary>
            id_ce_subjectAltName = id_ce (17) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_subjectAltName">
            <summary>
            id_ce_subjectAltName = id_ce (17) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_issuerAltName">
            <summary>
            id_ce_issuerAltName = id_ce (18) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_issuerAltName">
            <summary>
            id_ce_issuerAltName = id_ce (18) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_subjectDirectoryAttributes">
            <summary>
            id_ce_subjectDirectoryAttributes = id_ce (9) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_subjectDirectoryAttributes">
            <summary>
            id_ce_subjectDirectoryAttributes = id_ce (9) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_basicConstraints">
            <summary>
            id_ce_basicConstraints = id_ce (19) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_basicConstraints">
            <summary>
            id_ce_basicConstraints = id_ce (19) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_nameConstraints">
            <summary>
            id_ce_nameConstraints = id_ce (30) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_nameConstraints">
            <summary>
            id_ce_nameConstraints = id_ce (30) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_policyConstraints">
            <summary>
            id_ce_policyConstraints = id_ce (36) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_policyConstraints">
            <summary>
            id_ce_policyConstraints = id_ce (36) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_cRLDistributionPoints">
            <summary>
            id_ce_cRLDistributionPoints = id_ce (31) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_cRLDistributionPoints">
            <summary>
            id_ce_cRLDistributionPoints = id_ce (31) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_extKeyUsage">
            <summary>
            id_ce_extKeyUsage = id_ce (37) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_extKeyUsage">
            <summary>
            id_ce_extKeyUsage = id_ce (37) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_cRLNumber">
            <summary>
            id_ce_cRLNumber = id_ce (20) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_cRLNumber">
            <summary>
            id_ce_cRLNumber = id_ce (20) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_issuingDistributionPoint">
            <summary>
            id_ce_issuingDistributionPoint = id_ce (28) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_issuingDistributionPoint">
            <summary>
            id_ce_issuingDistributionPoint = id_ce (28) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_deltaCRLIndicator">
            <summary>
            id_ce_deltaCRLIndicator = id_ce (27) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_deltaCRLIndicator">
            <summary>
            id_ce_deltaCRLIndicator = id_ce (27) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_cRLReasons">
            <summary>
            id_ce_cRLReasons = id_ce (21) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_cRLReasons">
            <summary>
            id_ce_cRLReasons = id_ce (21) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_certificateIssuer">
            <summary>
            id_ce_certificateIssuer = id_ce (29) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_certificateIssuer">
            <summary>
            id_ce_certificateIssuer = id_ce (29) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_holdInstructionCode">
            <summary>
            id_ce_holdInstructionCode = id_ce (23) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_holdInstructionCode">
            <summary>
            id_ce_holdInstructionCode = id_ce (23) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_invalidityDate">
            <summary>
            id_ce_invalidityDate = id_ce (24) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_invalidityDate">
            <summary>
            id_ce_invalidityDate = id_ce (24) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_inhibitAnyPolicy">
            <summary>
            id_ce_inhibitAnyPolicy = id_ce (54) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_inhibitAnyPolicy">
            <summary>
            id_ce_inhibitAnyPolicy = id_ce (54) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_ce_freshestCRL">
            <summary>
            id_ce_freshestCRL = id_ce (46) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_ce_freshestCRL">
            <summary>
            id_ce_freshestCRL = id_ce (46) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__holdInstruction">
            <summary>
            holdInstruction as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__holdInstruction">
            <summary>
            holdInstruction as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_holdinstruction_none">
            <summary>
            id_holdinstruction_none = holdInstruction (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_holdinstruction_none">
            <summary>
            id_holdinstruction_none = holdInstruction (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_holdinstruction_callissuer">
            <summary>
            id_holdinstruction_callissuer = holdInstruction (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_holdinstruction_callissuer">
            <summary>
            id_holdinstruction_callissuer = holdInstruction (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_holdinstruction_reject">
            <summary>
            id_holdinstruction_reject = holdInstruction (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_holdinstruction_reject">
            <summary>
            id_holdinstruction_reject = holdInstruction (3) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__nistalgorithm">
            <summary>
            nistalgorithm as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__nistalgorithm">
            <summary>
            nistalgorithm as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__nist_hashalgs">
            <summary>
            nist_hashalgs = nistalgorithm (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__nist_hashalgs">
            <summary>
            nist_hashalgs = nistalgorithm (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_sha224">
            <summary>
            id_sha224 = nist_hashalgs (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_sha224">
            <summary>
            id_sha224 = nist_hashalgs (4) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_sha256">
            <summary>
            id_sha256 = nist_hashalgs (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_sha256">
            <summary>
            id_sha256 = nist_hashalgs (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_sha384">
            <summary>
            id_sha384 = nist_hashalgs (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_sha384">
            <summary>
            id_sha384 = nist_hashalgs (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_sha512">
            <summary>
            id_sha512 = nist_hashalgs (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_sha512">
            <summary>
            id_sha512 = nist_hashalgs (3) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__nist_aes">
            <summary>
            nist_aes = nistalgorithm (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__nist_aes">
            <summary>
            nist_aes = nistalgorithm (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes128_ecb">
            <summary>
            id_aes128_ecb = nist_aes (1) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes128_ecb">
            <summary>
            id_aes128_ecb = nist_aes (1) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes128_cbc">
            <summary>
            id_aes128_cbc = nist_aes (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes128_cbc">
            <summary>
            id_aes128_cbc = nist_aes (2) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes128_ofb">
            <summary>
            id_aes128_ofb = nist_aes (3) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes128_ofb">
            <summary>
            id_aes128_ofb = nist_aes (3) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes128_cfb">
            <summary>
            id_aes128_cfb = nist_aes (4) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes128_cfb">
            <summary>
            id_aes128_cfb = nist_aes (4) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes192_ecb">
            <summary>
            id_aes192_ecb = nist_aes (21) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes192_ecb">
            <summary>
            id_aes192_ecb = nist_aes (21) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes192_cbc">
            <summary>
            id_aes192_cbc = nist_aes (22) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes192_cbc">
            <summary>
            id_aes192_cbc = nist_aes (22) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes192_ofb">
            <summary>
            id_aes192_ofb = nist_aes (23) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes192_ofb">
            <summary>
            id_aes192_ofb = nist_aes (23) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes192_cfb">
            <summary>
            id_aes192_cfb = nist_aes (24) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes192_cfb">
            <summary>
            id_aes192_cfb = nist_aes (24) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes256_ecb">
            <summary>
            id_aes256_ecb = nist_aes (41) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes256_ecb">
            <summary>
            id_aes256_ecb = nist_aes (41) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes256_cbc">
            <summary>
            id_aes256_cbc = nist_aes (42) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes256_cbc">
            <summary>
            id_aes256_cbc = nist_aes (42) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes256_ofb">
            <summary>
            id_aes256_ofb = nist_aes (43) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes256_ofb">
            <summary>
            id_aes256_ofb = nist_aes (43) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__id_aes256_cfb">
            <summary>
            id_aes256_cfb = nist_aes (44) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__id_aes256_cfb">
            <summary>
            id_aes256_cfb = nist_aes (44) as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__dod_arc">
            <summary>
            dod_arc as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__dod_arc">
            <summary>
            dod_arc as string
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OID__netscape_smime">
            <summary>
            netscape_smime = dod_arc (2) as integer sequence
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Constants.OIDS__netscape_smime">
            <summary>
            netscape_smime = dod_arc (2) as string
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.TBSCertificate">
            <summary>
            TBSCertificate 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.Extensions">
            <summary>
            ASN.1 member Extensions 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.SubjectUniqueID">
            <summary>
            ASN.1 member SubjectUniqueID 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.IssuerUniqueID">
            <summary>
            ASN.1 member IssuerUniqueID 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.SubjectPublicKeyInfo">
            <summary>
            ASN.1 member SubjectPublicKeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.Subject">
            <summary>
            ASN.1 member Subject 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.Validity">
            <summary>
            ASN.1 member Validity 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.Issuer">
            <summary>
            ASN.1 member Issuer 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.SerialNumber">
            <summary>
            ASN.1 member SerialNumber 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertificate.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.#ctor(Goedel.LibCrypto.CryptoProvider,System.Collections.Generic.List{Goedel.LibCrypto.PKIX.Name})">
            <summary>
            Construct from a subject key, subject name and issuer name.
            </summary>
            <param name="SubjectKey">Key that the certificate will authenticate.</param>
            <param name="SubjectName">Subject name.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.#ctor(Goedel.LibCrypto.KeyPair,System.Collections.Generic.List{Goedel.LibCrypto.PKIX.Name})">
            <summary>
            Construct from a subject key, subject name and issuer name.
            </summary>
            <param name="SubjectKey">Key that the certificate will authenticate.</param>
            <param name="SubjectName">Subject name.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.TBSCertificate.RawData">
            <summary>
            The raw certificate data, as populated by the 'convert from binary
            certificate method.
            </summary>
            
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a TBSCertificate item from a X509Certificate2 object.
            </summary>
            <param name="X509Cert"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetValidity">
            <summary>
            Set the default validity interval of 1 year from the present date.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetValidity(System.Int32)">
            <summary>
            Set the validity interval in years from the present date.
            
            To reduce errors caused by clock skew between machines, the time interval
            is backdated to one minute after midnight UTC on the day of one hour before the
            current time.
            </summary>
            <param name="Years"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetValidity(System.TimeSpan)">
            <summary>
            Set the validity interval to the present data plus a specified time span.
            
            To reduce errors caused by clock skew between machines, the time interval
            is backdated to one minute after midnight UTC on the day of one hour before the
            current time.
            </summary>
            <param name="TimeSpan">Time interval.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetValidity(System.DateTime,System.DateTime)">
            <summary>
            Set the validity interval to the specified NotBefore and NotAfter times.
            </summary>
            <param name="NotBefore">First time instant that the certificate is valid.</param>
            <param name="NotAfter">Last time instant that the certificate is valid.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.AddExtension(Goedel.LibCrypto.PKIX.Extension)">
            <summary>
            Add an X.509v3 extension encty
            </summary>
            <param name="Extension">The extension to add.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetAuthorityKeyIdentifier(System.Byte[])">
            <summary>
            Set the Authority Key Identifier extension
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetSubjectKeyIdentifier(System.Byte[])">
            <summary>
            Set the subject key identifier extension.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetSubjectAltName(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetProfile(Goedel.LibCrypto.PKIX.Application)">
            <summary>
            Set the profile for an end entity certificate
            </summary>
            <param name="Use"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetProfile(Goedel.LibCrypto.PKIX.Application,System.Int32)">
            <summary>
            Set the profile for a certificate
            </summary>
            <param name="Use"></param>
            <param name="PathLen"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetBasicConstraints(System.Boolean,System.Int32)">
            <summary>
            Set the basic constraints field
            </summary>
            <param name="CA">If true, can act as a CA</param>
            <param name="PathLength">Maximum path length of a chain.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetKeyUsage(Goedel.LibCrypto.PKIX.KeyUses)">
            <summary>
            Pack key usage data into the stupidest bit field format in the known universe
            </summary>
            <param name="KeyUses">PKIX Key uses.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertificate.SetExtendedKeyUsage(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            PKIX extended key uses
            </summary>
            <param name="Values"></param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.DigestInfo">
            <summary>
            DigestInfo 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.DigestInfo.SubjectPublicKey">
            <summary>
            ASN.1 member SubjectPublicKey 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.DigestInfo.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.DigestInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.TaggedBitString">
            <summary>
            TaggedBitString 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TaggedBitString.SubjectPublicKey">
            <summary>
            ASN.1 member SubjectPublicKey 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TaggedBitString.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TaggedBitString.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.Extension">
            <summary>
            Extension 
            </summary>
            <summary>
            X.509v3 Extension
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Extension.Data">
            <summary>
            ASN.1 member Data 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Extension.Critical">
            <summary>
            ASN.1 member Critical 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Extension.ObjectIdentifier">
            <summary>
            ASN.1 member ObjectIdentifier 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Extension.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Extension.#ctor(Goedel.ASN.Root,System.Boolean)">
            <summary>
            Create an extension from the specified object with optional 
            criticality flag.
            </summary>
            <param name="Object">The object to encode.</param>
            <param name="Critical">If true, the extension will be marked as
              'critical' meaning that backwards compatibility will be broken 
              and legacy relying parties MUST reject the certificate. Only use
              if this is the intended behavior.</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.Validity">
            <summary>
            Validity 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Validity.NotAfter">
            <summary>
            ASN.1 member NotAfter 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Validity.NotBefore">
            <summary>
            ASN.1 member NotBefore 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Validity.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Validity.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Create Validity interval with specified NotBefore and NotAfter times.
            </summary>
            <param name="NotBefore">Time before which the enclosing certificate is not valid.</param>
            <param name="NotAfter">Time after which the enclosing certificate is not valid.</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.CertificateList">
            <summary>
            CertificateList 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificateList.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertificateList.TBSCertList">
            <summary>
            ASN.1 member TBSCertList 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertificateList.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.TBSCertList">
            <summary>
            TBSCertList 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertList.CrlExtensions">
            <summary>
            ASN.1 member CrlExtensions 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertList.RevokedCertificates">
            <summary>
            ASN.1 member RevokedCertificates 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertList.NextUpdate">
            <summary>
            ASN.1 member NextUpdate 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertList.ThisUpdate">
            <summary>
            ASN.1 member ThisUpdate 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertList.Issuer">
            <summary>
            ASN.1 member Issuer 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertList.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSCertList.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSCertList.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.CertEntry">
            <summary>
            CertEntry 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertEntry.CrlEntryExtensions">
            <summary>
            ASN.1 member CrlEntryExtensions 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertEntry.RevocationDate">
            <summary>
            ASN.1 member RevocationDate 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.CertEntry.UserCertificate">
            <summary>
            ASN.1 member UserCertificate 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.CertEntry.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.Name">
            <summary>
            Name 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.Name.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Name.Member">
            <summary>
            ASN.1 member Member 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.#ctor">
            <summary>
            Create a name with an empty segment list.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.#ctor(System.Int32[],System.String,Goedel.LibCrypto.PKIX.StringType)">
            <summary>
            Create a name with a single segment.
            </summary>
            <param name="OID">Object identifier</param>
            <param name="Value">Text value.</param>
            <param name="Type">Text encoding.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.#ctor(System.String)">
            <summary>
            Create name from a text string.
            </summary>
            <param name="CommonName">Text</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.#ctor(Goedel.LibCrypto.CryptoProvider)">
            <summary>
            Create name from the UDF fingerprint of a key.
            </summary>
            <param name="CryptoProvider"></param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.#ctor(Goedel.LibCrypto.KeyPair)">
            <summary>
            Create name from the UDF fingerprint of a key.
            </summary>
            <param name="KeyPair">Key from which to create the fingerprint.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.Add(System.Int32[],System.String,Goedel.LibCrypto.PKIX.StringType)">
            <summary>
            Add a name segment.
            </summary>
            <param name="OID">Object identifier</param>
            <param name="Value">Text value.</param>
            <param name="Type">Text encoding.</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.ToList">
            <summary>
            Convert to a singleton list.
            </summary>
            <returns>Singleton list with this as the only member.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Name.ToName(System.String)">
            <summary>
            
            </summary>
            <param name="CommonName"></param>
            <returns></returns>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.AttributeTypeValue">
            <summary>
            AttributeTypeValue 
            </summary>
            <summary>
            Attribute = type = value tripple
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AttributeTypeValue.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AttributeTypeValue.Type">
            <summary>
            ASN.1 member Type 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AttributeTypeValue.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AttributeTypeValue.#ctor(System.Int32[],System.String,Goedel.LibCrypto.PKIX.StringType)">
            <summary>
            Construct from components.
            </summary>
            <param name="OID">Object Identifier</param>
            <param name="Value">Value</param>
            <param name="StringType">Encoding.</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.AnyString">
            <summary>
            AnyString 
            </summary>
            <summary>
            Encoding of X.500 text string.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.AnyString.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AnyString.IA5String">
            <summary>
            ASN.1 member IA5String 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AnyString.BMPString">
            <summary>
            ASN.1 member BMPString 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AnyString.UTF8String">
            <summary>
            ASN.1 member UTF8String 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AnyString.PrintableString">
            <summary>
            ASN.1 member PrintableString 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AnyString.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AnyString.#ctor(System.String,Goedel.LibCrypto.PKIX.StringType)">
            <summary>
            Construct from StringType enumeration.
            </summary>
            <param name="Value">Text value.</param>
            <param name="StringType">Text Encoding.</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.AttributeTypeValues">
            <summary>
            AttributeTypeValues 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AttributeTypeValues.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AttributeTypeValues.Type">
            <summary>
            ASN.1 member Type 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AttributeTypeValues.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.AuthorityKeyIdentifier">
            <summary>
            AuthorityKeyIdentifier 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.AuthorityKeyIdentifier.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AuthorityKeyIdentifier.AuthorityCertSerialNumber">
            <summary>
            ASN.1 member AuthorityCertSerialNumber 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AuthorityKeyIdentifier.AuthorityCertIssuer">
            <summary>
            ASN.1 member AuthorityCertIssuer 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.AuthorityKeyIdentifier.KeyIdentifier">
            <summary>
            ASN.1 member KeyIdentifier 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.AuthorityKeyIdentifier.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.SubjectKeyIdentifier">
            <summary>
            SubjectKeyIdentifier 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.SubjectKeyIdentifier.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.SubjectKeyIdentifier.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.SubjectKeyIdentifier.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.KeyUsage">
            <summary>
            KeyUsage 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.KeyUsage.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUsage.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.KeyUsage.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.certificatePolicies">
            <summary>
            certificatePolicies 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.certificatePolicies.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.certificatePolicies.Value">
            <summary>
            ASN.1 member Value 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.certificatePolicies.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.PolicyInformation">
            <summary>
            PolicyInformation 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PolicyInformation.PolicyQualifiers">
            <summary>
            ASN.1 member PolicyQualifiers 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PolicyInformation.PolicyIdentifier">
            <summary>
            ASN.1 member PolicyIdentifier 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.PolicyInformation.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.PolicyQualifierInfo">
            <summary>
            PolicyQualifierInfo 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PolicyQualifierInfo.Qualifier">
            <summary>
            ASN.1 member Qualifier 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PolicyQualifierInfo.PolicyQualifierId">
            <summary>
            ASN.1 member PolicyQualifierId 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.PolicyQualifierInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.SubjectAltName">
            <summary>
            SubjectAltName 
            </summary>
            <summary>
            Subject Alt Name.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.SubjectAltName.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.SubjectAltName.Names">
            <summary>
            ASN.1 member Names 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.SubjectAltName.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.SubjectAltName.#ctor(Goedel.LibCrypto.PKIX.GeneralName)">
            <summary>
            Construct from a general name.
            </summary>
            <param name="GeneralName"></param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.GeneralName">
            <summary>
            GeneralName 
            </summary>
            <summary>
            Construct a generalized name depending on whether the name provided
            is an RFC822 mail address or not.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.GeneralName.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.GeneralName.DNSName">
            <summary>
            ASN.1 member DNSName 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.GeneralName.RFC822Name">
            <summary>
            ASN.1 member RFC822Name 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.GeneralName.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.GeneralName.#ctor(System.String)">
            <summary>
            Construct from the specified string.
            </summary>
            <param name="Name">The name to use. the type is inferred from the 
            syntax.</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.BasicConstraints">
            <summary>
            BasicConstraints 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.BasicConstraints.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.BasicConstraints.PathLenConstraint">
            <summary>
            ASN.1 member PathLenConstraint 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.BasicConstraints.CA">
            <summary>
            ASN.1 member CA 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.BasicConstraints.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.NameConstraints">
            <summary>
            NameConstraints 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.NameConstraints.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.NameConstraints.ExcludedSubtrees">
            <summary>
            ASN.1 member ExcludedSubtrees 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.NameConstraints.PermittedSubtrees">
            <summary>
            ASN.1 member PermittedSubtrees 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.NameConstraints.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.GeneralSubtrees">
            <summary>
            GeneralSubtrees 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.GeneralSubtrees.Maximum">
            <summary>
            ASN.1 member Maximum 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.GeneralSubtrees.Minimum">
            <summary>
            ASN.1 member Minimum 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.GeneralSubtrees.Base">
            <summary>
            ASN.1 member Base 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.GeneralSubtrees.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.ExtendedKeyUsage">
            <summary>
            ExtendedKeyUsage 
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.PKIX.ExtendedKeyUsage.OID">
            <summary>
            The OID value
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.ExtendedKeyUsage.KeyPurpose">
            <summary>
            ASN.1 member KeyPurpose 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.ExtendedKeyUsage.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.PFX">
            <summary>
            PFX 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PFX.MacData">
            <summary>
            ASN.1 member MacData 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PFX.AuthSafe">
            <summary>
            ASN.1 member AuthSafe 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PFX.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.PFX.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.ContentInfo">
            <summary>
            ContentInfo 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.ContentInfo.Content">
            <summary>
            ASN.1 member Content 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.ContentInfo.ContentType">
            <summary>
            ASN.1 member ContentType 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.ContentInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.MacData">
            <summary>
            MacData 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.MacData.Iterations">
            <summary>
            ASN.1 member Iterations 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.MacData.MacSalt">
            <summary>
            ASN.1 member MacSalt 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.MacData.MAC">
            <summary>
            ASN.1 member MAC 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.MacData.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.EncryptedData">
            <summary>
            EncryptedData 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.EncryptedData.EncryptedContent">
            <summary>
            ASN.1 member EncryptedContent 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.EncryptedData.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.EncryptedData.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.EncryptedContentInfo">
            <summary>
            EncryptedContentInfo 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.EncryptedContentInfo.EncryptedContent">
            <summary>
            ASN.1 member EncryptedContent 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.EncryptedContentInfo.Algorithm">
            <summary>
            ASN.1 member Algorithm 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.EncryptedContentInfo.ContentType">
            <summary>
            ASN.1 member ContentType 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.EncryptedContentInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.EncryptedPrivateKeyInfo">
            <summary>
            EncryptedPrivateKeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.EncryptedPrivateKeyInfo.EncryptedData">
            <summary>
            ASN.1 member EncryptedData 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.EncryptedPrivateKeyInfo.EncryptionAlgorithm">
            <summary>
            ASN.1 member EncryptionAlgorithm 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.EncryptedPrivateKeyInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.PrivateKeyInfo">
            <summary>
            PrivateKeyInfo 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PrivateKeyInfo.Attributes">
            <summary>
            ASN.1 member Attributes 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PrivateKeyInfo.PrivateKey">
            <summary>
            ASN.1 member PrivateKey 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PrivateKeyInfo.PrivateKeyAlgorithm">
            <summary>
            ASN.1 member PrivateKeyAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.PrivateKeyInfo.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.PrivateKeyInfo.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.RSAPrivateKey">
            <summary>
            RSAPrivateKey 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.Coefficient">
            <summary>
            ASN.1 member Coefficient 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.Exponent2">
            <summary>
            ASN.1 member Exponent2 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.Exponent1">
            <summary>
            ASN.1 member Exponent1 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.Prime2">
            <summary>
            ASN.1 member Prime2 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.Prime1">
            <summary>
            ASN.1 member Prime1 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.PrivateExponent">
            <summary>
            ASN.1 member PrivateExponent 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.PublicExponent">
            <summary>
            ASN.1 member PublicExponent 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.Modulus">
            <summary>
            ASN.1 member Modulus 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.RSAPrivateKey.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.RSAPrivateKey.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.Endorsement">
            <summary>
            Endorsement 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Endorsement.Signature">
            <summary>
            ASN.1 member Signature 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Endorsement.SignatureAlgorithm">
            <summary>
            ASN.1 member SignatureAlgorithm 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Endorsement.TBSEndorsement">
            <summary>
            ASN.1 member TBSEndorsement 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.Endorsement.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.TBSEndorsement">
            <summary>
            TBSEndorsement 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSEndorsement.Extensions">
            <summary>
            ASN.1 member Extensions 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSEndorsement.SubjectAltName">
            <summary>
            ASN.1 member SubjectAltName 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSEndorsement.Subject">
            <summary>
            ASN.1 member Subject 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSEndorsement.SubjectKeyIdentifier">
            <summary>
            ASN.1 member SubjectKeyIdentifier 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSEndorsement.IssuerKeyIdentifier">
            <summary>
            ASN.1 member IssuerKeyIdentifier 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSEndorsement.Issued">
            <summary>
            ASN.1 member Issued 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.TBSEndorsement.Version">
            <summary>
            ASN.1 member Version 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.PKIX.TBSEndorsement.Encode(Goedel.ASN.Buffer)">
             <summary>
             Encode ASN.1 class members to specified buffer. 
            
             NB Assinine ASN.1 DER encoding rules requires members be added in reverse order.
             </summary>
             <param name="Buffer">Output buffer</param>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.StringType">
            <summary>
            X.500 String types. Most should be avoided.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.StringType.IA5">
            <summary>
            US variant of the ASCII encoding.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.StringType.ASCII">
            <summary>
            Synonym for IA5.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.StringType.BMP">
            <summary>
            Avoid
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.StringType.UTF8">
            <summary>
            UTF8 encoding
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.StringType.Printable">
            <summary>
            Avoid
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.StringType.Teletex">
            <summary>
            Avoid
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.StringType.Universal">
            <summary>
            No really, just avoid, avoid, avoid.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.Application">
            <summary>
            High level Key Uses
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.ServerAuth">
            <summary>
            Server Authentication
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.ClientAuth">
            <summary>
            Client Authentication
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.CodeSigning">
            <summary>
            Code Signing
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.EmailEncryption">
            <summary>
            Email encryption
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.EmailSignature">
            <summary>
            Email Signature
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.DataEncryption">
            <summary>
            Data Encryption
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.DataSignature">
            <summary>
            Data Signature
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.TimeStamping">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.OCSP">
            <summary>
            Signing OCSP status responses
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.CRL">
            <summary>
            Signing CRLs
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.PersonalMaster">
            <summary>
            Mesh personal master profile signature.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.Confirmation">
            <summary>
            Confirmation
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.CA">
            <summary>
            Certificate Authority intermediate signer
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.Root">
            <summary>
            Root of trust.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.Application.DeviceMaster">
            <summary>
            Device root.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.PKIX.KeyUses">
            <summary>
            PKIX Key Uses
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.DigitalSignature">
            <summary>
            Sign
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.NonRepudiation">
            <summary>
            If clear, signatures may be repudiated
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.KeyEncipherment">
            <summary>
            Encryption
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.DataEncipherment">
            <summary>
            Don't use.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.KeyAgreement">
            <summary>
            Key agreement (used for client, server authentication).
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.KeyCertSign">
            <summary>
            Sign certificates
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.CRLSign">
            <summary>
            Sign CRLs
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.EncipherOnly">
            <summary>
            Don't use
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.PKIX.KeyUses.DecipherOnly">
            <summary>
            Don't Use.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderBulk">
            <summary>
            Base class for providers of bulk cryptographic algorithms, e.g. encryption,
            digest, authentication.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoProviderBulk.MemoryStream">
            <summary>
            Memory stream used in part processing mode.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderBulk.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Processes the specified region of the specified byte array
            </summary>
            <param name="Buffer">The input to process</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderBulk.Process(System.Byte[])">
            <summary>
            Processes the specified byte array
            </summary>
            <param name="Buffer">The input to process</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderBulk.Process(System.String)">
            <summary>
            Processes the specified string in UTF8 encoding.
            </summary>
            <param name="Data">The input to process</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderBulk.Process(Goedel.LibCrypto.CryptoData)">
            <summary>
            Processes the specified input data.
            </summary>
            <param name="Data">The input to process</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderBulk.ProcessPart(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Part processes the specified region of the specified byte array.
            
            [Efficiency] Currently the data is buffered internally and processed in one go.
            Use of the underlying TransformBlock methods would allow for more 
            efficient processing and reduce memory overhead.
            </summary>
            <param name="Buffer">The input to process</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderBulk.ProcessPart(System.Byte[])">
            <summary>
            Part processes the specified region of the specified byte array.
            </summary>
            <param name="Buffer">The input to process</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderBulk.ProcessPart(System.String)">
            <summary>
            Part processes the specified region of the specified string in UTF8 encoding.
            </summary>
            <param name="Data">The input to process</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderBulk.TransformFinal">
            <summary>
            Terminates a part processing session and returns the result.
            </summary>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoOperation">
            <summary>
            Describes the mechanism that created a cryptographic output.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.Plaintext">
            <summary>
            Data is plaintext source.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.Digest">
            <summary>
            Cryptographic Digest.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.Authenticate">
            <summary>
            Message Authentication Code,
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.Sign">
            <summary>
            Public key signature.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.Verify">
            <summary>
            Signature or Authentication Code verification.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.Encrypt">
            <summary>
            Encryption.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.AuthenticatedEncrypt">
            <summary>
            Authenticated Encryption.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.Decrypt">
            <summary>
            Decryption or decryption with authentication.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.WrapKey">
            <summary>
            Symmetric key wrap.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.UnwrapKey">
            <summary>
            Symmetric key unwrap.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.DeriveKey">
            <summary>
            Derive key.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoOperation.DeriveBits">
            <summary>
            Derive bits not to be used as a key
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoData">
            <summary>
            Container for data generated by a cryptographic operation
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoData.CryptoOperation">
            <summary>
            Operation that created this data.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoData.Key">
            <summary>
            Symmetric Key
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoData.IV">
            <summary>
            Symmetric Key IV
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoData.Identifier">
            <summary>
            Catalog entry
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoData.Integrity">
            <summary>
            Returned integrity code.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoData.Data">
            <summary>
            Returned Content
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoData.OID">
            <summary>
            OID of algorithm that produced the result.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoData.#ctor(Goedel.LibCrypto.CryptoAlgorithmID,System.String,System.Byte[])">
            <summary>
            Create and populate a result for a digest or MAC algorithm.
            </summary>
            <param name="Identifier"></param>
            <param name="OID"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoData.#ctor(Goedel.LibCrypto.CryptoAlgorithmID,System.String,System.Byte[],System.Byte[])">
            <summary>
            Create and populate a result for an encryption with authentication algorithm.
            </summary>
            <param name="Identifier"></param>
            <param name="OID"></param>
            <param name="Value"></param>
            <param name="Data"></param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoData.#ctor(Goedel.LibCrypto.CryptoAlgorithmID,System.String,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Create and populate a result for an encryption with authentication algorithm.
            </summary>
            <param name="Identifier"></param>
            <param name="OID"></param>
            <param name="Integrity"></param>
            <param name="Data"></param>
            <param name="Key">Key data</param>
            <param name="IV">Initialization Vector</param>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderDigest">
            <summary>
            Base class for all cryptographic hash providers.
            
            Provides utility and convenience functions that are employed in derrived
            classes. This provides consistency when using either the built in .NET
            providers or those from other sources.
            
            Unlike the .NET API, the wrapper provider completely conceals the details 
            of the cryptographic algorithm implementation. It is not necessary to 
            observe block boundaries when using the TransformData methods.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderDigest.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoProviderDigest.HashAlgorithm">
            <summary>
            Hash algorithm provider.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderDigest.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes an instance of the hash provider with the specified
            implementation.
            </summary>
            <param name="HashAlgorithm"></param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderDigest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderDigest.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified byte array
            </summary>
            <param name="Buffer">The input to compute the hash code for.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderDigest.TransformFinal">
            <summary>
            Terminates a part processing session and returns the result.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderDigest.Initialize">
            <summary>
            Initializes or re-initializes an instance.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderSHA2_256">
            <summary>
            Provider for the SHA-2 256 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_256.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_256.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_256.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_256.JSONName">
            <summary>
            JSON Algorithm Name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_256.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_256.GetCryptoProvider">
            <summary>
            Returns a factory delegate for this class.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSHA2_256.#ctor">
            <summary>
            Create a SHA-2-256 digest provider.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderSHA2_512">
            <summary>
            Provider for the SHA-2 512 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_512.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_512.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_512.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_512.JSONName">
            <summary>
            JSON Algorithm Name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_512.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA2_512.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSHA2_512.#ctor">
            <summary>
            Create a SHA-2-256 digest provider.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderSHA1">
            <summary>
            Provider for the SHA-2 512 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA1.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA1.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA1.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA1.JSONName">
            <summary>
            JSON Algorithm Name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA1.Size">
            <summary>
            Default output size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSHA1.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSHA1.#ctor">
            <summary>
            Create a SHA-2-256 digest provider.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderAuthentication">
            <summary>
            Provider for bulk authentication algorithms (e.g. HMAC-SHA256).
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderAuthentication.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderAuthentication.Key">
            <summary>
            Authentication key.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderAuthentication.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes an instance of the hash provider with the specified
            implementation.
            </summary>
            <param name="HashAlgorithm"></param>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderHMACSHA2_256">
            <summary>
            Provider for HMAC SHA-2 256 bits.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_256.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_256.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_256.JSONName">
            <summary>
            JSON Algorithm Name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_256.Size">
            <summary>
            Default algorithm key and output size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_256.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderHMACSHA2_256.#ctor">
            <summary>
            Constructor, algorithm takes no parameters.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderHMACSHA2_512">
            <summary>
            Provider for HMAC SHA-2 512 bits.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_512.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_512.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_512.JSONName">
            <summary>
            JSON Algorithm Name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_512.Size">
            <summary>
            Default algorithm key and output size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderHMACSHA2_512.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderHMACSHA2_512.#ctor">
            <summary>
            Constructor, algorithm takes no parameters.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderEncryption">
            <summary>
            Provider for bulk encryption algorithms (e.g. AES).
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryption.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryption.Key">
            <summary>
            The Key under which encryption/decryption is performed.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryption.IV">
            <summary>
            The initialization vector under which encryption/decryption is performed.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryption.Provider">
            <summary>
            The .NET cryptographic provider (for use by sub classes).
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoProviderEncryption.AppendIV">
            <summary>
            If set to true, the initialization vector (if used) will be prepended to the
            output byte stream.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoProviderEncryption.AppendIntegrity">
            <summary>
            If set to true, the authentication code (if created) will be prepended to the
            output byte stream.
            
            Since we don't currently have a GCM mode, this isn't currently used.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.Int32,System.Security.Cryptography.CipherMode)">
            <summary>
            Constructor for initializing a delegate class.
            </summary>
            <param name="SymmetricAlgorithm">Cryptographic provider.</param>
            <param name="KeySize">Key size in bits.</param>
            <param name="CipherMode">Cipher mode to use</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.StartEncrypt">
            <summary>
            Start an encryption session with random key and IV.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.StartEncrypt(System.Byte[],System.Byte[])">
            <summary>
            Start an encryption session with the specified key and IV.
            </summary>
            <param name="Key"></param>
            <param name="IV"></param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.StartDecrypt(System.Byte[])">
            <summary>
            Start a decryption session with the specified key and implicit IV.
            </summary>
            <param name="Key"></param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.StartDecrypt(System.Byte[],System.Byte[])">
            <summary>
            Start a decryption session with the specified key and IV.
            </summary>
            <param name="Key"></param>
            <param name="IV"></param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.Encrypt(System.Byte[])">
            <summary>
            Encrypt the provided cryptoblob
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.Encrypt(Goedel.LibCrypto.CryptoData)">
            <summary>
            Encrypt the provided cryptoblob
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.Decrypt(Goedel.LibCrypto.CryptoData,System.Byte[])">
            <summary>
            Start an encryption session with random key and IV.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryption.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Processes the specified region of the specified byte array
            </summary>
            <param name="InputBuffer">The input to process</param>
            <param name="InputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="Count">The number of bytes in the array to use as data.</param>
            <returns>The result of the cryptographic operation.</returns>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderEncryptAES">
            <summary>
            Provider for the SHA-2 256 bit Hash Algorithm
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryptAES.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryptAES.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryptAES.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryptAES.JSONName">
            <summary>
            JSON Algorithm Name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryptAES.Size">
            <summary>
            Default algorithm key size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderEncryptAES.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryptAES.#ctor(System.Int32)">
            <summary>
            Create an AES provider with the specified key size.
            </summary>
            <param name="KeySize"></param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderEncryptAES.#ctor(System.Int32,System.Security.Cryptography.CipherMode)">
            <summary>
            Create an AES provider with the specified key size and mode.
            </summary>
            <param name="KeySize">Key Size in bits.</param>
            <param name="CipherMode">The cipher mode to use (CBC or CTS).</param>
        </member>
        <member name="T:Goedel.LibCrypto.KeyHandle">
            <summary>
            Describes a reference to a key
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyHandle.UDF">
            <summary>
            UDF fingerprint of the key
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.KeyHandle.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="UDF"></param>
        </member>
        <member name="M:Goedel.LibCrypto.KeyHandle.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="UDF"></param>
            <param name="Application"></param>
        </member>
        <member name="M:Goedel.LibCrypto.KeyHandle.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="UDF"></param>
            <param name="Application"></param>
            <param name="Name"></param>
        </member>
        <member name="M:Goedel.LibCrypto.KeyHandle.#ctor(Goedel.LibCrypto.PKIX.Certificate)">
            <summary>
            Form a KeyHandle from an end entity certificate 
            </summary>
            <param name="Certificate"></param>
        </member>
        <member name="M:Goedel.LibCrypto.KeyHandle.#ctor(System.Collections.Generic.List{Goedel.LibCrypto.PKIX.Certificate})">
            <summary>
            Form a KeyHandle from a certificate chain.
            </summary>
            <param name="Certificates">Certificate Chain</param>
        </member>
        <member name="P:Goedel.LibCrypto.KeyHandle.Certificate">
            <summary>
            X.509 v3 Certificate for this key and set of uses.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyHandle.CertificateChain">
            <summary>
            X.509 v3 Certificate chain validating this certificate.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoKey">
            <summary>
            Base class for all cryptographic keys.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoKey.CryptoAlgorithmID">
            <summary>
            Cryptographic Algorithm Identifier
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoKey.UDF">
            <summary>
            UDF fingerprint of the key
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.KeyPair">
            <summary>
            Base class for all cryptographic key pairs.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyPair.AsymmetricAlgorithm">
            <summary>
            Return the underlying .NET crypto provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyPair.TestMode">
            <summary>
            If true, keys will be created in containers prefixed with the name
            "test:" to allow them to be easily identified and cleaned up.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyPair.SignatureProvider">
            <summary>
            Returns a signature provider for the key (if the private portion is available).
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyPair.VerificationProvider">
            <summary>
            Returns a signature provider for the key (if the public portion is available).
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyPair.ExchangeProviderEncrypt">
            <summary>
            Returns an encryption provider for the key (if the public portion is available)
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyPair.ExchangeProviderDecrypt">
            <summary>
            Returns an encryption provider for the key (if the public portion is available)
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.KeyPair.GetPrivate">
            <summary>
            Search for the local key with the specified UDF fingerprint.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.KeyPair.FindLocal(System.String)">
            <summary>
            Search all the local machine stores to find a key pair with the specified
            fingerprint.
            </summary>
            <param name="UDF"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.LibCrypto.KeyPair.ContainerName(System.String)">
            <summary>
            Generate a key container name from a UDF fingerprint.
            </summary>
            <param name="UDF">UDF fingerprint value.</param>
            <returns>The container name.</returns>
        </member>
        <member name="P:Goedel.LibCrypto.KeyPair.KeyInfoData">
            <summary>
            The public key data formatted as a PKIX KeyInfo data blob.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyPair.UDF">
            <summary>
            Returns the UDF fingerprint of the current key as a string.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.KeyPair.GetUDFBytes">
            <summary>
            Returns the UDF fingerprint of the current key as a byte array.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.KeyPair.GetKeyPair(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Get the key associated with a system asymmetric provider.
            </summary>
            <param name="AsymmetricAlgorithm">Asymmeteic provider.</param>
            <returns></returns>
        </member>
        <member name="T:Goedel.LibCrypto.RSAKeyPair">
            <summary>
            Utility class, not visible outside the assembly. Contains public key 
            utility functions that are shared by the signature and exchange 
            providers.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.RSAKeyPair.AsymmetricAlgorithm">
            <summary>
            Return the underlying .NET cryptographic provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.RSAKeyPair.SignatureProvider">
            <summary>
            Returns a signature provider for the key (if the private portion is available).
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.RSAKeyPair.VerificationProvider">
            <summary>
            Returns a signature provider for the key (if the private portion is available).
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.RSAKeyPair.ExchangeProviderEncrypt">
            <summary>
            Returns an encryption provider for the key (if the public portion is available)
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.RSAKeyPair.ExchangeProviderDecrypt">
            <summary>
            Returns an encryption provider for the key (if the public portion is available)
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.RSAKeyPair.Provider">
            <summary>
            The Windows RSA provider.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.RSAKeyPair.GetPrivate">
            <summary>
            Retrieve the private key from local storage.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.RSAKeyPair.KeyInfoData">
            <summary>
            Return a PKIX SubjectPublicKeyInfo structure for the key.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.RSAKeyPair.#ctor(System.Int32)">
            <summary>
            Generate an ephemeral RSA key with the specified key size.
            </summary>
            <param name="KeySize">Size of key in multiples of 64 bits.</param>
        </member>
        <member name="M:Goedel.LibCrypto.RSAKeyPair.#ctor(System.Int32,System.Boolean)">
            <summary>
            Generate an ephemeral RSA key with the specified key size.
            </summary>
            <param name="KeySize">Size of key in multiples of 64 bits.</param>
            <param name="Exportable">If true, key may be exported, otherwise machine bound.</param>
        </member>
        <member name="M:Goedel.LibCrypto.RSAKeyPair.#ctor(System.String)">
            <summary>
            Create a new KeyPair with the specified container fingerprint.
            </summary>
            <param name="UDF">Fingerprint of key.</param>
        </member>
        <member name="M:Goedel.LibCrypto.RSAKeyPair.FindLocal(System.String)">
            <summary>
            Find a KeyPair with the specified container fingerprint in the local key store.
            </summary>
            <param name="UDF">Fingerprint of key.</param>
            <returns>RSAKeyPair</returns>
        </member>
        <member name="M:Goedel.LibCrypto.RSAKeyPair.#ctor(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Generate a KeyPair from a .NET Provider.
            </summary>
            <param name="RSACryptoServiceProvider"></param>
        </member>
        <member name="M:Goedel.LibCrypto.RSAKeyPair.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Generate a KeyPair from a .NET set of parameters.
            </summary>
            <param name="Parameters">The RSA parameters.</param>
        </member>
        <member name="M:Goedel.LibCrypto.RSAKeyPair.Persist(Goedel.LibCrypto.KeySecurity)">
            <summary>
            Makes a key persistent on the local machine with the specified level of
            protection.
            </summary>
            <param name="KeySecurity">Key protection level to be applied.</param>
        </member>
        <member name="T:Goedel.LibCrypto.Secret">
            <summary>
            Represents a secret key that may be split into or reformed from 
            a collection of shares.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.Secret.KeyBits">
            <summary>
            Size of key in bits.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.Secret.KeyBytes">
            <summary>
            Size of key in bytes;
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.Secret.Key">
            <summary>
            The Key value
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.Secret.Text">
            <summary>
            The Key Value as a Base32 encoded string.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.#ctor(System.Int32)">
            <summary>
            Create a new random secret with the specified number of bits.
            </summary>
            <param name="Bits"></param>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.#ctor(System.Byte[])">
            <summary>
            Create a secret from the specified key value.
            </summary>
            <param name="Key"></param>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.#ctor(Goedel.LibCrypto.KeyShare[])">
            <summary>
            Recreate a secret from the specified shares.
            </summary>
            <param name="Shares">The shares to be recombined.</param>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.#ctor(System.String[])">
            <summary>
            Recreate a secret from shares specified as Base32 encoded strings.
            </summary>
            <param name="Shares">The shares to be recombined.</param>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.#ctor">
            <summary>
            Constructor for use in inherited classes.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.GetHashCode">
            <summary>
            Hash code of the current class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.Equals(System.Object)">
            <summary>
            Test for equality
            </summary>
            <param name="obj">The secret to test against</param>
            <returns>true if the parameter has the same key value, false otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.Split(System.Int32,System.Int32)">
            <summary>
            Create a set of N key shares with a quorum of K.
            </summary>
            <param name="N">Number of key shares to create (max is 32).</param>
            <param name="K">Quorum of key shares required to reconstruct the secret.</param>
            <returns>The key shares created.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.Secret.Split">
            <summary>
            Create a set of 2 key shares with a quorum of 2.
            </summary>
            <returns>The key shares created.</returns> 
        </member>
        <member name="M:Goedel.LibCrypto.Secret.Split(System.Int32)">
            <summary>
            Create a set of N key shares with a quorum of N.
            </summary>
            <returns>The key shares created.</returns> 
        </member>
        <member name="T:Goedel.LibCrypto.KeyShare">
            <summary>
            A member of a key share collection.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyShare.Threshold">
            <summary>
            Quorum required to recombine the key shares to recover the secret.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyShare.Index">
            <summary>
            Index of this key share in the collection.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyShare.Data">
            <summary>
            The key share data.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.KeyShare.Value">
            <summary>
            The key share data as a BigInteger.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.KeyShare.#ctor(System.Int32)">
            <summary>
            Construct a key share with the specified number of random bits.
            </summary>
            <param name="Bits">Size of key share to create (in bits).</param>
        </member>
        <member name="M:Goedel.LibCrypto.KeyShare.#ctor(System.Byte[])">
            <summary>
            Construct a key share with the specified secret value.
            </summary>
            <param name="Key">The secret value.</param>
        </member>
        <member name="M:Goedel.LibCrypto.KeyShare.#ctor(System.Int32,System.Numerics.BigInteger)">
            <summary>
            Construct a key share with the specified secret value and index.
            </summary>
            <param name="Index">The key share index and threshold.</param>
            <param name="Value">The key share value/</param>
        </member>
        <member name="M:Goedel.LibCrypto.KeyShare.#ctor(System.Int32,System.Byte[])">
            <summary>
            Construct a key share with the specified secret value and index.
            </summary>
            <param name="Index">The key share index and threshold.</param>
            <param name="Bytes">The key share value/</param>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderAsymmetric">
            <summary>
            Base class for all public key cryptographic providers.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderAsymmetric.Generate(Goedel.LibCrypto.KeySecurity)">
            <summary>
            Generates a new signing key pair with the default key size.
            </summary>
            <param name="KeySecurity">Specifies the protection level for the key.</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderAsymmetric.FindLocal(System.String)">
            <summary>
            Locate the privatge key in the local key store.
            </summary>
            <param name="UDF">Fingerprint of key to locate.</param>
            <returns></returns>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderSignature">
            <summary>
            Crypto provider for digital signature algorithms.
            
            The chief reason this is necessary is the excrable nature of the .NET APIs
            in which the base class does not expose methods such as sign.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignature.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignature.DigestAlgorithm">
            <summary>
            The digest algorithm.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignature.GetDigestProvider">
            <summary>
            Return a provider for the current digest algorithm.
            </summary>
            <returns>Digest provider</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignature.Sign(Goedel.LibCrypto.CryptoData)">
            <summary>
            Sign a previously computed digest (requires private key).
            </summary>
            <param name="Data">Computed digest</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignature.Sign(System.Byte[])">
            <summary>
            Sign data using the default digest (requires private key).
            </summary>
            <param name="Data">Data to be signed.</param>
            <returns>Signature.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignature.Verify(Goedel.LibCrypto.CryptoData,System.Byte[])">
            <summary>
            Verify signature.
            </summary>
            <param name="Data">Computed digest</param>
            <param name="Signature">Signature</param>
            <returns>True if signature verification is successful, otherwise false.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignature.Verify(Goedel.LibCrypto.CryptoData,Goedel.LibCrypto.CryptoData)">
            <summary>
            Verify signature.
            </summary>
            <param name="Data">Computed digest</param>
            <param name="Signature">Signature</param>
            <returns>True if signature verification is successful, otherwise false.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignature.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verify signature.
            </summary>
            <param name="Data">Computed digest</param>
            <param name="Signature">Signature</param>
            <returns>True if signature verification is successful, otherwise false.</returns>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignature.JSONKeyUse">
            <summary>
            JSON Key use.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderSignatureRSA">
            <summary>
            Provider for RSA Signature class.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.KeyPair">
            <summary>
            Return the provider key.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.OID">
            <summary>
            ASN.1 Object Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.KeySize">
            <summary>
            The default key size.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignatureRSA.#ctor(System.Int32)">
            <summary>
            Create an instance of the RSA crypto provider.
            </summary>
            <param name="KeySize">Default key size.</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignatureRSA.#ctor(System.Int32,Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Create an instance of the RSA crypto provider with specified 
            default key size and digest algorithm.
            </summary>
            <param name="KeySize">Default key size.</param>
            <param name="DigestAlgorithm">Default digest algorithm.</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignatureRSA.#ctor(Goedel.LibCrypto.RSAKeyPair)">
            <summary>
            Create an instance of the RSA crypto provider from an RSA Key Pair.
            </summary>
            <param name="RSAKeyPair">The RSA Key Pair</param>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.JSONName">
            <summary>
            JSON Algorithm Name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.JSONKeyType">
            <summary>
            JSON Key type.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.Size">
            <summary>
            Default algorithm key size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderSignatureRSA.UDF">
            <summary>
            The key fingerprint.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignatureRSA.Generate(Goedel.LibCrypto.KeySecurity)">
            <summary>
            Generate a new RSA Key Pair with the Key size specified when the 
            instance was created.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignatureRSA.FindLocal(System.String)">
            <summary>
            Locate the private key in the local key store.
            </summary>
            <param name="UDF">Fingerprint of key to locate.</param>
            <returns></returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignatureRSA.Sign(Goedel.LibCrypto.CryptoData)">
            <summary>
            Sign a previously computed digest (requires private key).
            </summary>
            <param name="Data">Computed digest</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderSignatureRSA.Verify(Goedel.LibCrypto.CryptoData,System.Byte[])">
            <summary>
            Verify signature.
            </summary>
            <param name="Data">Computed digest</param>
            <param name="Signature">Signature</param>
            <returns>True if signature verification is successful, otherwise false.</returns>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderExchange">
            <summary>
            Base provider for public key encryption and symmetric key wrap.
            
            NB these classes do not support bulk encryption.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchange.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchange.Encrypt(System.Byte[])">
            <summary>
            Encrypt key data.
            </summary>
            <param name="Input">The key data to encrypt.</param>
            <returns>Encrypted data</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchange.Encrypt(Goedel.LibCrypto.CryptoData)">
            <summary>
            Encrypt key data.
            </summary>
            <param name="Input">The key data to encrypt.</param>
            <returns>Encrypted data</returns>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchange.JSONKeyUse">
            <summary>
            JSON Key use.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchange.Decrypt(System.Byte[])">
            <summary>
            Decrypt data. Note that this is only possibly when the corresponding private
            key is available on the local machine.
            </summary>
            <param name="Input">The data to decrypt.</param>
            <returns>Decrypted data.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchange.Decrypt(Goedel.LibCrypto.CryptoData)">
            <summary>
            Decrypt data. Note that this is only possibly when the corresponding private
            key is available on the local machine.
            </summary>
            <param name="Input">The data to decrypt.</param>
            <returns>Decrypted data.</returns>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderExchangeRSA">
            <summary>
            Provider for RSA encryption.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.KeyPair">
            <summary>
            Return the key as a RSAKeyPair;
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.Provider">
            <summary>
            The wrapped provider class.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.KeySize">
            <summary>
            The default key size
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.UDF">
            <summary>
            The key fingerprint.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoProviderExchangeRSA.OAEP">
            <summary>
            If true (default), OAEP padding will be used. If false, deprecated PKCS#1.5 
            padding is used.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchangeRSA.#ctor(System.Int32)">
            <summary>
            Return a provider with the specified key size.
            </summary>
            <param name="KeySize">Key length in bits.</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchangeRSA.#ctor(Goedel.LibCrypto.RSAKeyPair)">
            <summary>
            Create an instance of the RSA crypto provider.
            </summary>
            <param name="RSAKeyPair">RSAKeyPair to use.</param>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.JSONName">
            <summary>
            JSON Algorithm Name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.Size">
            <summary>
            Default algorithm key size.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchangeRSA.Generate(Goedel.LibCrypto.KeySecurity)">
            <summary>
            Generate a new RSA Key Pair with the Key size specified when the 
            instance was created.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchangeRSA.FindLocal(System.String)">
            <summary>
            Locate private key in local key store.
            </summary>
            <param name="UDF">Fingerprint of key</param>
            <returns>true if found, otherwise false.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchangeRSA.Encrypt(System.Byte[])">
            <summary>
            Encrypt data block. Block MUST be smaller than the key length or
            an exception will be thrown.
            </summary>
            <param name="Input">Data to encrypt.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchangeRSA.Decrypt(System.Byte[])">
            <summary>
            Decrypt data block.
            </summary>
            <param name="Input">Data to decrypt.</param>
            <returns>Decrypted data.</returns>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSA.JSONKeyType">
            <summary>
            JSON Key type.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProviderExchangeRSAPKCS">
            <summary>
            Deprecated implementation of RSA. For compatibility only.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSAPKCS.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoProviderExchangeRSAPKCS.#ctor(System.Int32)">
            <summary>
            RSA provider that defaults to the PKCS#1.5 padding. For compatibility use only.
            </summary>
            <param name="KeySize"></param>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProviderExchangeRSAPKCS.GetCryptoProvider">
            <summary>
            Returns a delegate that creates an instance of this class.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoAlgorithmID">
            <summary>
            Cryptographic Algorithm Identifiers.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.NULL">
            <summary>Null algorithm</summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.SHA_1_DEPRECATED">
            <summary>
            SHA1 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.SHA_2_256">
            <summary>
            SHA2 256 bit
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.SHA_2_512">
            <summary>
            SHA2 512 bit
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.SHA_3_256">
            <summary>
            SHA3 256 bit
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.SHA_3_512">
            <summary>
            SHA3 512 bit
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.AES128CBC">
            <summary>
            AES 128 bit in CBC mode
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.AES256CBC">
            <summary>
            AES 256 bit in CBC mode
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.AES128CTS">
            <summary>
            AES 128 bit in Cipher Text Stealing (CTS) mode
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.AES256CTS">
            <summary>
            AES 256 bit in Cipher Text Stealing (CTS) mode
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.HMAC_SHA_2_256">
            <summary>
            HMAC SHA 2 with 256 bit key.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.HMAC_SHA_2_512">
            <summary>
            HMAC SHA 2 with 512 bit key.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.RSASign2048">
            <summary>
            RSA Signature with 2048 bit key.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.RSASign4096">
            <summary>
            RSA Signature with 4096 bit key.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ECDSA_P256">
            <summary>
            Elliptic Curve DSA with curve P256
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ECDSA_P384">
            <summary>
            Elliptic Curve DSA with curve P384
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ECDSA_P521">
            <summary>
            Elliptic Curve DSA with curve P521
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.RSAExch2048">
            <summary>
            RSA Encryption with 2048 bit key using OAEP padding.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.RSAExch4096">
            <summary>
            RSA Encryption with 4096 bit key using OAEP padding.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.RSAExch2048_P15">
            <summary>
            RSA Encryption with 2048 bit key using PKCS#1.5 padding.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.RSAExch4096_P15">
            <summary>
            RSA Encryption with 4096 bit key using PKCS#1.5 padding.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ECDH_P256">
            <summary>
            Elliptic Curve DH with curve P256
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ECDH_P384">
            <summary>
            Elliptic Curve DH with curve P384
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ECDH_P521">
            <summary>
            Elliptic Curve DH with curve P521
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.AlgorithmCount">
            <summary>
            Count of the number of built-in algorithms 
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ModeCBC">
            <summary>
            Flag for CBC mode
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ModeCTS">
            <summary>
            Flag for Cipher Text Stealling Mode
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmID.ModeGCM">
            <summary>
            Flag for Galois Counter Mode
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.KeySecurity">
            <summary>
            Defines levels of key protection to be applied.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.KeySecurity.Master">
            <summary>
            Key is a master key and will be stored in a key container marked 
            as archivable and user protected. Master keys SHOULD be deleted after 
            being escrowed and recovery verified.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.KeySecurity.Admin">
            <summary>
            Key is an administration key and will be  stored in a key container marked as non 
            exportable and user protected.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.KeySecurity.Device">
            <summary>
            Key is a device key and will be  stored in a key container bound to 
            the current machine that cannot be exported or archived.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.KeySecurity.Ephemeral">
            <summary>
            Key is temporary and cannot be exported or stored.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.KeySecurity.Exportable">
            <summary>
            Key may be exported.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoAlgorithmClass">
            <summary>
            Algorithm classes.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmClass.NULL">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmClass.Digest">
            <summary>
            Digest algorithm.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmClass.MAC">
            <summary>
            Message Authentication Code.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmClass.Encryption">
            <summary>
            Symmetric Encryption.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmClass.Signature">
            <summary>
            Digital Signature
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoAlgorithmClass.Exchange">
            <summary>
            Asymmetric Encryption.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoCatalog">
            <summary>
            Manages a cryptographic catalog and associated key management functions.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoCatalog.Default">
            <summary>
            Returns the default catalog of suites.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoCatalog.AlgorithmDigest">
            <summary>
            The default digest algorithm.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoCatalog.AlgorithmEncryption">
            <summary>
            The default symmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoCatalog.AlgorithmMAC">
            <summary>
            The default message authentication code algorithm.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoCatalog.AlgorithmExchange">
            <summary>
            The default asymmetric encryption algorithm.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoCatalog.AlgorithmSignature">
            <summary>
            The default signature algorithm.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.CryptoCatalog.Algorithms">
            <summary>
            Array containing the registered algorithms.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.#ctor">
            <summary>
            Create and populate a new catalog of cryptographic algorithms including the 
            default providers for all the standard algorithms.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.Add(Goedel.LibCrypto.CryptoProvider)">
            <summary>
            Add a cryptographic algorithm provider to the catalog
            </summary>
            <param name="CryptoProvider"></param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.Get(Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider by algorithm identifier
            </summary>
            <param name="ID">Principal algorithm identifier.</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.Get(Goedel.LibCrypto.CryptoAlgorithmID,Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider by algorithm identifier
            </summary>
            <param name="ID">Principal algorithm identifier.</param>
            <param name="Bulk">Bulk algorithm identifier.</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetDigest(Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetAuthentication(Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider  by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetEncryption(Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider  by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetAsymmetric(Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider  by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetSignature(Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetSignature(Goedel.LibCrypto.CryptoAlgorithmID,Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a signature provider by algorithm identifier
            </summary>>
            <param name="Signature">Signature algorithm identifier.</param>
            <param name="Digest">Digest algorithm identifer.</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetExchange(Goedel.LibCrypto.CryptoAlgorithmID,Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a signature provider by algorithm identifier
            </summary>>
            <param name="Signature">Signature algorithm identifier.</param>
            <param name="Digest">Digest algorithm identifer.</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetSignature(System.String)">
            <summary>
            Get a signature provider by key fingerprint.
            </summary>
            <param name="UDF">Fingerprint of key</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetExchange(System.String)">
            <summary>
            Get an exchange provider by key fingerprint.
            </summary>
            <param name="UDF">Fingerprint of key</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetExchange(Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Get a cryptographic provider  by algorithm identifier
            </summary>
            <param name="ID">Algorithm identifier</param>
            <returns>Cryptographic provider if found or null otherwise.</returns>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoCatalog.RNGCryptoServiceProvider">
            <summary>
            The random number generator associated with the catalog.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetBits(System.Int32)">
            <summary>
            Returns a byte array with the specified number of random bits.
            </summary>
            <param name="Bits">Number of bits</param>
            <returns>A byte array with the specified number of bits.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoCatalog.GetBytes(System.Int32)">
            <summary>
            Returns a byte array with the specified number of random bytes.
            </summary>
            <param name="Bytes">Number of bytes</param>
            <returns>A byte array with the specified number of bytess.</returns>        
        </member>
        <member name="T:Goedel.LibCrypto.CryptoAlgorithm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.CryptoAlgorithmID">
            <summary>
            The enumerated cryptographic algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.Name">
            <summary>
            .NET Framework name
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.AlgorithmClass">
            <summary>
            Return the type of algorithm.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.OID">
            <summary>
            ASN.1 Object Identifier
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.KeySize">
            <summary>
            Default algorithm key  or output size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.JSON_kty">
            <summary>
            JSON Key Type
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.JSON_use">
            <summary>
            JSON Key Use
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.JSON_alg">
            <summary>
            JSON Algorithm Identifier. NB, not all algorithms have a JSON
            algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoAlgorithm.XML">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoAlgorithm.#ctor(Goedel.LibCrypto.CryptoAlgorithmID,System.String,System.Int32,System.String,System.String,System.String,System.String,Goedel.LibCrypto.CryptoAlgorithmClass,Goedel.LibCrypto.GetCryptoProvider)">
            <summary>
            Create an instance with the specified property values.
            </summary>
            <param name="CryptoAlgorithmID">CryptoAlgorithmID Identifier.</param>
            <param name="Name">.NET Framework name.</param>
            <param name="KeySize">Default algorithm key size.</param>
            <param name="JSON_alg">JSON Algorithm Identifier.</param>
            <param name="JSON_kty">JSON Key type.</param>
            <param name="JSON_use">JSON Key Use.</param>
            <param name="XML">XML algorithm identifier.</param>
            <param name="AlgorithmClass">Algorithm type.</param>
            <param name="GetCryptoProvider">Delegate returning the default crypto provider.</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoAlgorithm.#ctor(Goedel.LibCrypto.CryptoProvider)">
            <summary>
            Create an instance from the public properties of the specified CryptoProvider.
            </summary>
            <param name="CryptoProvider">Template from which to take the properties.</param>
        </member>
        <member name="T:Goedel.LibCrypto.GetCryptoProvider">
            <summary>
            Delegate to create a cryptographic provider with optional key size and/or
            bulk algorithm variants where needed.
            </summary>
            <param name="KeySize">Key size parameter (if needed).</param>
            <param name="BulkAlgorithmID">Algorithm identifier of bulk algorithm (if needed).</param>
            <returns></returns>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoProvider">
            <summary>
            Base class for cryptography providers.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.CryptoAlgorithm">
            <summary>
            Return a CryptoAlgorithm structure with properties describing this provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.AlgorithmClass">
            <summary>
            The type of algorithm
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.CryptoAlgorithmID">
            <summary>
            The CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.Name">
            <summary>
            CryptoAlgorithmID Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.JSONName">
            <summary>
            JSON Algorithm Name.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.JSONKeyType">
            <summary>
            JSON Key type.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.JSONKeyUse">
            <summary>
            JSON Key use.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.Size">
            <summary>
            Default algorithm key or output size.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.GetCryptoProvider">
            <summary>
            Returns the default crypto provider.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.OID">
            <summary>
            ASN.1 Object Identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.UDF">
            <summary>
            The UDF fingerprint of the key.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoProvider.KeyPair">
            <summary>
            Return the provider key.
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoSuite">
            <summary>
            Describe a suite of crypto algorithms.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoSuite.JOSE">
            <summary>
            JOSE algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoSuite.DigestAlgorithm">
            <summary>
            Digest algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoSuite.Authentication">
            <summary>
            Authentication (MAC) algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoSuite.Encryption">
            <summary>
            Encryption algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoSuite.Signature">
            <summary>
            Signature algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoSuite.Exchange">
            <summary>
            Exchange algorithm identifier.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoSuite.#ctor(System.String,Goedel.LibCrypto.CryptoAlgorithmID,Goedel.LibCrypto.CryptoAlgorithmID,Goedel.LibCrypto.CryptoAlgorithmID,Goedel.LibCrypto.CryptoAlgorithmID,Goedel.LibCrypto.CryptoAlgorithmID)">
            <summary>
            Construct a suite description with the specified algorithms.
            </summary>
            <param name="JOSE">JOSE name.</param>
            <param name="DigestAlgorithm">Digest algorithm to use.</param>
            <param name="Authentication">Bulk authentication algorithm (MAC).</param>
            <param name="Encryption">Bulk encryption algorithm.</param>
            <param name="Signature">Signature algorithm.</param>
            <param name="Exchange">Public Key agreement algorithm.</param>
        </member>
        <member name="T:Goedel.LibCrypto.CryptoSuites">
            <summary>
            Catalog of CryptoSuite objects indexed by JSON algorithm identifier.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.CryptoSuites.Default">
            <summary>
            Default catalog of suites.
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoSuites.#ctor">
            <summary>
            Construct a catalog of suites 
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoSuites.#ctor(Goedel.LibCrypto.CryptoCatalog,System.Boolean)">
            <summary>
            Construct a catalog of suites using algorithms from the specified 
            catalog and optionally registering algorithms specified in RFC 7518
            </summary>
            <param name="CryptoCatalog">Catalog of cryptographic algorithms to use.</param>
            <param name="Defaults">If tru, prefills catalog with defined algorithms.</param>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoSuites.Get(System.String)">
            <summary>
            Get Suite by JSON name.
            </summary>
            <param name="Name">JSON alg property.</param>
            <returns>Suite of algorithm identifiers if found, otherwise null.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.CryptoSuites.Add(Goedel.LibCrypto.CryptoSuite)">
            <summary>
            Add a suite with the specified parameters to the catalog.
            </summary>
            <param name="Suite"></param>
        </member>
        <member name="T:Goedel.LibCrypto.UDFConstants">
            <summary>
            Constants used in building UDF values.
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.UDFConstants.KeyIdentifierAlgSHA_2_512">
            <summary>
            Key identifier for UDF using SHA-2-512
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.UDFConstants.KeyIdentifierAlgSHA_3_512">
            <summary>
            Key identifier for UDF using SHA-3-512
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.UDFConstants.PKIXKey">
            <summary>
            Content type identifier for PKIX KeyInfo data type
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.UDFConstants.OpenPGPKey">
            <summary>
            Content type identifier for OpenPGP Key
            </summary>
        </member>
        <member name="F:Goedel.LibCrypto.UDFConstants.EscrowedKey">
            <summary>
            Content type for mesh escrowed key
            </summary>
        </member>
        <member name="T:Goedel.LibCrypto.UDF">
            <summary>
            Class implementing the Uniform Data Fingerprint spec.
            </summary>
        </member>
        <member name="P:Goedel.LibCrypto.UDF.DefaultBits">
            <summary>
            Default number of UDF bits (usually 150).
            </summary>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.From(System.String,System.Byte[],System.Int32)">
            <summary>
            Compute UDF from binary data and content type with specified precision.
            </summary>
            <param name="ContentType">MIME media type. See 
            http://www.iana.org/assignments/media-types/media-types.xhtml for list.</param>
            <param name="Data">Data to be fingerprinted.</param>
            <param name="Bits">Precision, must be a multiple of 25 bits.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.FromEscrowed(System.Byte[],System.Int32)">
            <summary>
            Calculate a UDF fingerprint from a secret key used to escrow a private
            key in the mesh.
            </summary>
            <param name="Data">Data to be fingerprinted.</param>
            <param name="Bits">Precision, must be a multiple of 25 bits.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.FromKeyInfo(System.Byte[])">
            <summary>
            Calculate a UDF fingerprint from a PKIX KeyInfo blob with specified precision.
            </summary>
            <param name="Data">Data to be fingerprinted.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.FromKeyInfo(System.Byte[],System.Int32)">
            <summary>
            Calculate a UDF fingerprint from a PKIX KeyInfo blob with specified precision.
            </summary>
            <param name="Data">Data to be fingerprinted.</param>
            <param name="Bits">Precision, must be a multiple of 25 bits.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.ToString(System.String,System.Byte[],System.Int32)">
            <summary>
            Calculate a UDF fingerprint from an OpenPGP key with specified precision.
            </summary>
            <param name="ContentType">MIME media type of data being fingerprinted.</param>
            <param name="Data">Data to be fingerprinted.</param>
            <param name="Bits">Precision, must be a multiple of 25 bits.</param>
            <returns>The binary UDF fingerprint.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.ToString(System.Byte[])">
            <summary>
            Convert a binary UDF to a string.
            </summary>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.SHA1(System.Byte[])">
            <summary>
            Calculate a SHA-1 fingerprint in Base16 format.
            </summary>
            <param name="Data">Data to be fingerprinted</param>
            <returns>Fingerprint as a hexadecimal string.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.SHA256(System.Byte[])">
            <summary>
            Calculate a SHA-1 fingerprint in Base16 format.
            </summary>
            <param name="Data">Data to be fingerprinted</param>
            <returns>Fingerprint as a hexadecimal string.</returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.Random">
            <summary>
            Return a random sequence as a UDF 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.LibCrypto.UDF.Random(System.Int32)">
            <summary>
            Return a random sequence as a UDF 
            </summary>
            <param name="Bits"></param>
            <returns></returns>
        </member>
        <member name="T:Goedel.ASN.Constants">
            <summary>
            Constants for encoding ASN1 data
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.Boolean">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.Integer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.BitString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.OctetString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.Null">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.ObjectIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.ObjectDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.External">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.Real">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.Numerated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.Embedded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.UTF8String">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.RelativeOid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.Sequence">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.Set">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.NumericString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.PrintableString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.TeletexString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.VideotexString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.IA5String">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.UTCTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.GeneralizedTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.GraphicString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.VisibleString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.GeneralString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.UniversalString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.CharacterString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Constants.BMPString">
            <summary>
            
            </summary>
        </member>
        <member name="T:Goedel.ASN.Root">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.ASN.Root.OID">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.ASN.Root.DER">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.ASN.Root.Encode(Goedel.ASN.Buffer)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Goedel.ASN.ASN">
            <summary>
            Utility class containing static methods.
            </summary>
        </member>
        <member name="F:Goedel.ASN.ASN.Dot">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.ASN.ASN.OIDToArray(System.String)">
             <summary>
            
             </summary>
             <param name="OID"></param>
             <returns></returns>
        </member>
        <member name="T:Goedel.ASN.TagMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.TagMode.Universal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.TagMode.Constructed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.TagMode.Application">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.TagMode.Context">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.TagMode.Private">
            <summary>
            
            </summary>
        </member>
        <member name="T:Goedel.ASN.ASNFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.ASNFlags.Nil">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.ASNFlags.Implicit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.ASNFlags.Explicit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.ASNFlags.Optional">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.ASNFlags.Context">
            <summary>
            
            </summary>
        </member>
        <member name="T:Goedel.ASN.Buffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Goedel.ASN.Buffer.MaxChunk">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.ASN.Buffer.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:Goedel.ASN.Buffer.Length">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.ASN.Buffer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.ASN.Buffer.#ctor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Goedel.ASN.Buffer.Debug(System.String)">
            <summary>
            
            </summary>
            <param name="Tag"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Add(System.Byte)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.AddBase128(System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.AddTag(System.Int32,Goedel.ASN.TagMode)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Mode"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.AddLength(System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.AddOID(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Sequence_Start">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Sequence_End(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Position"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Sequence_End(System.Int32)">
            <summary>
            
            </summary>
            <param name="Position"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Set_Start">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Set_End(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Position"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.AddTagLength(System.Int32,System.Int32,Goedel.ASN.TagMode,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Position"></param>
            <param name="Tag"></param>
            <param name="TagMode"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Any(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Boolean(System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="code"></param>
            <param name="Default"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Boolean(System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Integer(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="code"></param>
            <param name="Default"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Integer(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__BigInteger(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.AddBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Start"></param>
            <param name="End"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Null(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Bits(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__VBits(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Octets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Object(Goedel.ASN.Root,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__OIDRef(System.Int32[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__Time(System.DateTime,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__UTCTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__GeneralizedTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__UTF8String(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__PrintableString(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__IA5String(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
        <member name="M:Goedel.ASN.Buffer.Encode__BMPString(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Data"></param>
            <param name="Flags"></param>
            <param name="Code"></param>
        </member>
    </members>
</doc>
